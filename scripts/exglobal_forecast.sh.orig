#!/bin/bash
################################################################################
## UNIX Script Documentation Block
## Script name:         exglobal_fcst_nemsfv3gfs.sh
## Script description:  Runs a global FV3GFS model forecast
##
## Author:   Fanglin Yang       Organization: NCEP/EMC       Date: 2016-11-15
## Abstract: This script runs a single GFS forecast with FV3 dynamical core.
##           This script is created based on a C-shell script that GFDL wrote
##           for the NGGPS Phase-II Dycore Comparison Project.
##
## Script history log:
## 2016-11-15  Fanglin Yang   First Version.
## 2017-02-09  Rahul Mahajan  Added warm start and restructured the code.
## 2017-03-10  Fanglin Yang   Updated for running forecast on Cray.
## 2017-03-24  Fanglin Yang   Updated to use NEMS FV3GFS with IPD4
## 2017-05-24  Rahul Mahajan  Updated for cycling with NEMS FV3GFS
## 2017-09-13  Fanglin Yang   Updated for using GFDL MP and Write Component
## 2019-04-02
##
## Attributes:
##   Language: Portable Operating System Interface (POSIX) Shell
##   Machines: All supported platforms
##
## Usage (Arguments)
##	No command line argument
##
## Data input (location, name)
## 	Warm start files:
## 		1. restart file except sfc_data, $gmemdir/RESTART/$PDY.$cyc.*.nc
##		2. sfcanl_data, $memdir/RESTART/$PDY.$cyc.*.nc
##		3. coupler_res, $gmemdir/RESTART/$PDY.$cyc.coupler.res
##		4. increment file, $memdir/${CDUMP}.t${cyc}z.atminc.nc
##			OR $DATA/INPUT/fv3_increment.nc
##	Cold start files:
##		1. initial condition, $memdir/INPUT/*.nc
##	Restart files:
##
##	Fix files:
##		1. computing grid, $FIXfv3/$CASE/${CASE}_grid.tile${n}.nc
##		2. orography data, $FIXfv3/$CASE/${CASE}_oro_data.tile${n}.nc
##		3. mosaic data, $FIXfv3/$CASE/${CASE}_mosaic.nc
##		4. Global O3 data, $FIX_AM/${O3FORC}
##		5. Global H2O data, $FIX_AM/${H2OFORC}
##		6. Global solar constant data, $FIX_AM/global_solarconstant_noaa_an.txt
##		7. Global surface emissivity, $FIX_AM/global_sfc_emissivity_idx.txt
##		8. Global CO2 historical data, $FIX_AM/global_co2historicaldata_glob.txt
##		8. Global CO2 monthly data, $FIX_AM/co2monthlycyc.txt
##		10. Additional global CO2 data, $FIX_AM/fix_co2_proj/global_co2historicaldata
##		11. Climatological aerosol global distribution
##			$FIX_AM/global_climaeropac_global.txt
## 		12. Monthly volcanic forcing $FIX_AM/global_volcanic_aerosols_YYYY-YYYY.txt
##
## Data output (location, name)
##	If quilting=true and output grid is gaussian grid:
##	   1. atmf data, $memdir/${CDUMP}.t${cyc}z.atmf${FH3}.$OUTPUT_FILE
##	   2. sfcf data, $memdir/${CDUMP}.t${cyc}z.sfcf${FH3}.$OUTPUT_FILE
##	   3. logf data, $memdir/${CDUMP}.t${cyc}z.logf${FH3}.$OUTPUT_FILE
##	If quilting=false and output grid is not gaussian grid:
##           1. NGGPS2D, $memdir/nggps2d.tile${n}.nc
##	   2. NGGPS3D, $memdir/nggps3d.tile${n}.nc
##	   3. grid spec, $memdir/grid_spec.tile${n}.nc
##	   4. atmospheric static tiles, $memdir/atmos_static.tile${n}.nc
##	   5. atmospheric 4x daily tiles, $memdir/atmos_4xdaily.tile${n}.nc
##
## Status output
##	0: Normal
##	others: Error
##
## Namelist input, in RUNDIR,
##	1. diag_table
##	2. nems.configure
##	3. model_configure
##	4. input.nml
#######################
# Main body starts here
#######################

VERBOSE=${VERBOSE:-"YES"}
if [ $VERBOSE = "YES" ] ; then
  echo $(date) EXECUTING $0 $* >&2
  set -x
fi

SCRIPTDIR=$(dirname $(readlink -f "$0") )/../ush
echo "MAIN: environment loaded for $machine platform,Current Script locates in $SCRIPTDIR."

# include all subroutines. Executions later.
source $SCRIPTDIR/cplvalidate.sh	# validation of cpl*
source $SCRIPTDIR/forecast_predet.sh	# include functions for variable definition
source $SCRIPTDIR/forecast_det.sh  # include functions for run type determination
source $SCRIPTDIR/forecast_postdet.sh	# include functions for variables after run type determination
source $SCRIPTDIR/nems_configure.sh	# include functions for nems_configure processing
source $SCRIPTDIR/parsing_model_configure_FV3.sh
source $SCRIPTDIR/parsing_model_configure_DATM.sh

# Compset string. For nems.configure.* template selection. Default ATM only
confignamevarfornems=${confignamevarfornems:-'atm'}

# Coupling control switches, for coupling purpose, off by default
cpl=${cpl:-.false.}
cplflx=${cplflx:-.false.} # default off,import from outside source
cplwav=${cplwav:-.false.} # ? how to control 1-way/2-way?
cplchem=${cplchem:-.false.} # Chemistry model
cplice=${cplice:-.false.} # ICE model

OCNTIM=${OCNTIM:-1800}
DELTIM=${DELTIM:-450}
ICETIM=${DELTIM}

CPL_SLOW=${CPL_SLOW:-$OCNTIM}
CPL_FAST=${CPL_FAST:-$ICETIM}

echo "MAIN: $confignamevarfornems selected"
echo "MAIN: Forecast script started for $confignamevarfornems on $machine"

echo "MAIN: Validating $confignamevarfornems with cpl switches"
cplvalidate
echo "MAIN: $confignamevarfornems validated, continue"
# Validate the consistency between $confignamevarfornems and $CPL switches

echo "MAIN: Loading variables before determination of run type"

common_predet

echo $RUN
case $RUN in
  'data') DATM_predet;;
  'gfs') FV3_GFS_predet;;
  'gdas') FV3_GFS_predet;;
  'gefs') FV3_GEFS_predet;;
esac
[[ $cplflx = .true. ]] && MOM6_predet
#[[ $cplwav = .true. ]] && WW3_predet #no WW3_predet at this time
[[ $cplice = .true. ]] && CICE_predet

case $RUN in
  'gfs') FV3_GFS_det;;
  'gdas') FV3_GFS_det;;
  'gefs') FV3_GEFS_det;;
esac				#no run type determination for data atmosphere
[[ $cplflx = .true. ]] && MOM6_det
[[ $cplwav = .true. ]] && WW3_det
[[ $cplice = .true. ]] && CICE_det

echo "MAIN: RUN Type Determined"

echo "MAIN: Post-determination set up of run type"
echo $RUN
case $RUN in
  'data') DATM_postdet;;
  'gfs') FV3_GFS_postdet;;
  'gdas') FV3_GFS_postdet;;
  'gefs') FV3_GEFS_postdet;;
esac				#no post determination set up for data atmosphere
[[ $cplflx = .true. ]] && MOM6_postdet
[[ $cplwav = .true. ]] && WW3_postdet
[[ $cplice = .true. ]] && CICE_postdet
echo "MAIN: Post-determination set up of run type finished"

echo "MAIN: Writing name lists and model configuration"
case $RUN in
  'data') DATM_nml;;
  'gfs') FV3_GFS_nml;;
  'gdas') FV3_GFS_nml;;
  'gefs') FV3_GEFS_nml;;
esac				#no namelist for data atmosphere
[[ $cplflx = .true. ]] && MOM6_nml
[[ $cplwav = .true. ]] && WW3_nml
[[ $cplice = .true. ]] && CICE_nml
[[ $cplchem = .true. ]] && GOCART_rc

case $RUN in
  'data') DATM_model_configure;;
  'gfs') FV3_model_configure;;
  'gdas') FV3_model_configure;;
  'gefs') FV3_model_configure;;
esac
echo "MAIN: Name lists and model configuration written"

echo "MAIN: Writing NEMS Configure file"
writing_nems_configure
echo "MAIN: NEMS configured"

#------------------------------------------------------------------
# run the executable

if [ $esmf_profile ]; then
  export ESMF_RUNTIME_PROFILE=ON
  export ESMF_RUNTIME_PROFILE_OUTPUT=SUMMARY
fi

if [ $machine != 'sandbox' ]; then
  $NCP $FCSTEXECDIR/$FCSTEXEC $DATA/.
  export OMP_NUM_THREADS=$NTHREADS_FV3
  $APRUN_FV3 $DATA/$FCSTEXEC 1>&1 2>&2
  export ERR=$?
  export err=$ERR
  $ERRSCRIPT || exit $err
else
  echo "MAIN: mpirun launch here"
fi

if [ $machine != 'sandbox' ]; then
  case $RUN in
    'data') data_out_Data_ATM;;
    'gfs') data_out_GFS;;
    'gdas') data_out_GFS;;
    'gefs') data_out_GEFS;;
  esac
  [[ $cplflx = .true. ]] && MOM6_out
  [[ $cplwav = .true. ]] && WW3_out
  [[ $cplice = .true. ]] && CICE_out
  [[ $esmf_profile = .true. ]] && CPL_out
else
  echo "MAIN: Running on sandbox mode, no output linking"
fi
echo "MAIN: Output copied to COMROT"

#------------------------------------------------------------------
<<<<<<< HEAD
rm -f nems.configure

if [ $cplwav = ".true." ]; then
#### ww3 version of nems.configure

# Switch on cpl flag
  cpl=.true.

NTASKS_FV3m1=$((NTASKS_FV3-1))
atm_petlist_bounds=" 0 $((NTASKS_FV3-1))"
wav_petlist_bounds=" $((NTASKS_FV3)) $((NTASKS_FV3m1+npe_wav))"
###  atm_petlist_bounds=" 0   1511"
###  atm_petlist_bounds=$atm_petlist_bounds
###  wav_petlist_bounds="1512 1691"
###  wav_petlist_bounds=$wav_petlist_bounds
  coupling_interval_sec=${coupling_interval_sec:-1800}
  rm -f nems.configure
cat > nems.configure <<EOF
EARTH_component_list: ATM WAV
EARTH_attributes::
  Verbosity = high
  HierarchyProtocol = off
::

ATM_model:                      fv3
ATM_petlist_bounds:             ${atm_petlist_bounds}
ATM_attributes::
  Verbosity = 0
  DumpFields = false
::

WAV_model:                      ww3
WAV_petlist_bounds:             ${wav_petlist_bounds}
WAV_attributes::
  Verbosity = high
::

runSeq::
  @${coupling_interval_sec}
    ATM
    ATM -> WAV :SrcTermProcessing=0:TermOrder=SrcSeq
    WAV
  @
::
EOF
else
#### fv3 standalone version of nems.configure
cat > nems.configure <<EOF
EARTH_component_list: ATM
ATM_model:            fv3
runSeq::
  ATM
::
EOF
fi

# Set NTASKS_CFG to reflect cplwav
NTASKS_CFG=$NTASKS_FV3
if [ $cplwav = ".true." ]; then
  NTASKS_CFG=$((NTASKS_FV3 + npe_wav))
fi

rm -f model_configure
cat > model_configure <<EOF
total_member:            $ENS_NUM
print_esmf:              ${print_esmf:-.false.}
PE_MEMBER01:             $NTASKS_CFG
start_year:              ${tPDY:0:4}
start_month:             ${tPDY:4:2}
start_day:               ${tPDY:6:2}
start_hour:              ${tcyc}
start_minute:            0
start_second:            0
fhrot:                   ${IAU_FHROT:-0}
nhours_fcst:             $FHMAX
RUN_CONTINUE:            ${RUN_CONTINUE:-".false."}
ENS_SPS:                 ${ENS_SPS:-".false."}

dt_atmos:                $DELTIM
output_1st_tstep_rst:    .false.
calendar:                ${calendar:-'julian'}
cpl:                     ${cpl:-".false."}
memuse_verbose:          ${memuse_verbose:-".false."}
atmos_nthreads:          $NTHREADS_FV3
use_hyper_thread:        ${hyperthread:-".false."}
ncores_per_node:         $cores_per_node
restart_interval:        $restart_interval

quilting:                $QUILTING
write_groups:            ${WRITE_GROUP:-1}
write_tasks_per_group:   ${WRTTASK_PER_GROUP:-24}
output_history:          ${OUTPUT_HISTORY:-".true."}
write_dopost:            ${WRITE_DOPOST:-".false."}
write_nsflip:            ${WRITE_NSFLIP:-".false."}
num_files:               ${NUM_FILES:-2}
filename_base:           'atm' 'sfc'
output_grid:             $OUTPUT_GRID
output_file:             $OUTPUT_FILETYPES
ichunk2d:                ${ichunk2d:-0}
jchunk2d:                ${jchunk2d:-0}
ichunk3d:                ${ichunk3d:-0}
jchunk3d:                ${jchunk3d:-0}
kchunk3d:                ${kchunk3d:-0}
ideflate:                ${ideflate:-1}
nbits:                   ${nbits:-14}
write_nemsioflip:        $WRITE_NEMSIOFLIP
write_fsyncflag:         $WRITE_FSYNCFLAG
imo:                     $LONB_IMO
jmo:                     $LATB_JMO

nfhout:                  $FHOUT
nfhmax_hf:               $FHMAX_HF
nfhout_hf:               $FHOUT_HF
nsout:                   $NSOUT
iau_offset:              ${IAU_OFFSET}
EOF

#&coupler_nml
#  months = ${months:-0}
#  days = ${days:-$((FHMAX/24))}
#  hours = ${hours:-$((FHMAX-24*(FHMAX/24)))}
#  dt_atmos = $DELTIM
#  dt_ocean = $DELTIM
#  current_date = $curr_date
#  calendar = 'julian'
#  memuse_verbose = .false.
#  atmos_nthreads = $NTHREADS_FV3
#  use_hyper_thread = ${hyperthread:-".false."}
#  ncores_per_node = $cores_per_node
#  restart_secs = $restart_secs
#  $coupler_nml
#/

atmos_model_nml=""
if [ $RUN_CCPP = "YES" ]; then
 atmos_model_nml="ccpp_suite = $CCPP_SUITE"
fi

cat > input.nml <<EOF
&amip_interp_nml
  interp_oi_sst = .true.
  use_ncep_sst = .true.
  use_ncep_ice = .false.
  no_anom_sst = .false.
  data_set = 'reynolds_oi'
  date_out_of_range = 'climo'
  $amip_interp_nml
/

&atmos_model_nml
  blocksize = $blocksize
  chksum_debug = $chksum_debug
  dycore_only = $dycore_only
  $atmos_model_nml
/

&diag_manager_nml
  prepend_date = .false.
  $diag_manager_nml
/

&fms_io_nml
  checksum_required = .false.
  max_files_r = 100
  max_files_w = 100
  $fms_io_nml
/

&mpp_io_nml
shuffle=${shuffle:-1}
deflate_level=${deflate_level:-1}
/

&fms_nml
  clock_grain = 'ROUTINE'
  domains_stack_size = ${domains_stack_size:-3000000}
  print_memory_usage = ${print_memory_usage:-".false."}
  $fms_nml
/

&fv_core_nml
  layout = $layout_x,$layout_y
  io_layout = $io_layout
  npx = $npx
  npy = $npy
  ntiles = $ntiles
  npz = $npz
  grid_type = -1
  make_nh = $make_nh
  fv_debug = ${fv_debug:-".false."}
  range_warn = ${range_warn:-".false."}
  reset_eta = .false.
  n_sponge = ${n_sponge:-"10"}
  nudge_qv = ${nudge_qv:-".true."}
  nudge_dz = ${nudge_dz:-".false."}
  tau = ${tau:-10.}
  rf_cutoff = ${rf_cutoff:-"7.5e2"}
  d2_bg_k1 = ${d2_bg_k1:-"0.15"}
  d2_bg_k2 = ${d2_bg_k2:-"0.02"}
  kord_tm = ${kord_tm:-"-9"}
  kord_mt = ${kord_mt:-"9"}
  kord_wz = ${kord_wz:-"9"}
  kord_tr = ${kord_tr:-"9"}
  hydrostatic = $hydrostatic
  phys_hydrostatic = $phys_hydrostatic
  use_hydro_pressure = $use_hydro_pressure
  dz_min = ${dz_min:-"2."}
  psm_bc = ${psm_bc:-"1"}
  beta = 0.
  a_imp = 1.
  p_fac = 0.1
  k_split = $k_split
  n_split = $n_split
  nwat = ${nwat:-2}
  na_init = $na_init
  d_ext = 0.
  dnats = ${dnats:-0}
  fv_sg_adj = ${fv_sg_adj:-"450"}
  d2_bg = 0.
  nord = ${nord:-3}
  nord_tr = ${nord_tr:-2}
  dddmp = ${dddmp:-0.2}
  d4_bg = ${d4_bg:-0.15}
  vtdm4 = $vtdm4
  delt_max = ${delt_max:-"0.002"}
  ke_bg = 0.
  do_vort_damp = $do_vort_damp
  external_ic = $external_ic
  external_eta = ${external_eta:-.true.}
  gfs_phil = ${gfs_phil:-".false."}
  nggps_ic = $nggps_ic
  mountain = $mountain
  ncep_ic = $ncep_ic
  d_con = $d_con
  hord_mt = $hord_mt
  hord_vt = $hord_xx
  hord_tm = $hord_xx
  hord_dp = -$hord_xx
  hord_tr = ${hord_tr:-"8"}
  adjust_dry_mass = ${adjust_dry_mass:-".true."}
  dry_mass=${dry_mass:-98320.0}
  consv_te = $consv_te
  do_sat_adj = ${do_sat_adj:-".false."}
  consv_am = .false.
  fill = .true.
  dwind_2d = .false.
  print_freq = $print_freq
  warm_start = $warm_start
  no_dycore = $no_dycore
  z_tracer = .true.
  agrid_vel_rst = ${agrid_vel_rst:-".true."}
  read_increment = $read_increment
  res_latlon_dynamics = $res_latlon_dynamics
  $fv_core_nml
/

&cires_ugwp_nml
       knob_ugwp_solver  = ${knob_ugwp_solver:-2}
       knob_ugwp_source  = ${knob_ugwp_source:-1,1,0,0}
       knob_ugwp_wvspec  = ${knob_ugwp_wvspec:-1,25,25,25}
       knob_ugwp_azdir   = ${knob_ugwp_azdir:-2,4,4,4}
       knob_ugwp_stoch   = ${knob_ugwp_stoch:-0,0,0,0}
       knob_ugwp_effac   = ${knob_ugwp_effac:-1,1,1,1}
       knob_ugwp_doaxyz  = ${knob_ugwp_doaxyz:-1}
       knob_ugwp_doheat  = ${knob_ugwp_doheat:-1}
       knob_ugwp_dokdis  = ${knob_ugwp_dokdis:-1}
       knob_ugwp_ndx4lh  = ${knob_ugwp_ndx4lh:-1}
       knob_ugwp_version = ${knob_ugwp_version:-0}
       launch_level      = ${launch_level:-54}                   
/

&external_ic_nml
  filtered_terrain = $filtered_terrain
  levp = $LEVS
  gfs_dwinds = $gfs_dwinds
  checker_tr = .false.
  nt_checker = 0
  $external_ic_nml
/

&gfs_physics_nml
  fhzero       = $FHZER
  h2o_phys     = ${h2o_phys:-".true."}
  ldiag3d      = ${ldiag3d:-".false."}
  fhcyc        = $FHCYC
  use_ufo      = ${use_ufo:-".true."}
  pre_rad      = ${pre_rad:-".false."}
  imp_physics  = ${imp_physics:-"99"}
  pdfcld       = ${pdfcld:-".false."}
  fhswr        = ${FHSWR:-"3600."}
  fhlwr        = ${FHLWR:-"3600."}
  ialb         = ${IALB:-"1"}
  iems         = ${IEMS:-"1"}
  iaer         = $IAER
  icliq_sw     = ${icliq_sw:-"2"}
  ico2         = $ICO2
  isubc_sw     = ${isubc_sw:-"2"}
  isubc_lw     = ${isubc_lw:-"2"}
  isol         = ${ISOL:-"2"}
  lwhtr        = ${lwhtr:-".true."}
  swhtr        = ${swhtr:-".true."}
  cnvgwd       = ${cnvgwd:-".true."}
  shal_cnv     = ${shal_cnv:-".true."}
  cal_pre      = ${cal_pre:-".true."}
  redrag       = ${redrag:-".true."}
  dspheat      = ${dspheat:-".true."}
  hybedmf      = ${hybedmf:-".false."}
  satmedmf     = ${satmedmf-".true."}
  isatmedmf    = ${isatmedmf-"1"}
  lheatstrg    = ${lheatstrg-".false."}
  random_clds  = ${random_clds:-".true."}
  trans_trac   = ${trans_trac:-".true."}
  cnvcld       = ${cnvcld:-".true."}
  imfshalcnv   = ${imfshalcnv:-"2"}
  imfdeepcnv   = ${imfdeepcnv:-"2"}
  cdmbgwd      = ${cdmbgwd:-"4.0,0.15,1.0,1.0"}
  prslrd0      = ${prslrd0:-"0."}
  ivegsrc      = ${ivegsrc:-"1"}
  isot         = ${isot:-"1"}
  lsoil        = ${lsoil:-"4"}
  lsm          = ${lsm:-"2"}
  iopt_dveg    = ${iopt_dveg:-"1"}
  iopt_crs     = ${iopt_crs:-"1"}
  iopt_btr     = ${iopt_btr:-"1"}
  iopt_run     = ${iopt_run:-"1"}
  iopt_sfc     = ${iopt_sfc:-"1"}
  iopt_frz     = ${iopt_frz:-"1"}
  iopt_inf     = ${iopt_inf:-"1"}
  iopt_rad     = ${iopt_rad:-"1"}
  iopt_alb     = ${iopt_alb:-"2"}
  iopt_snf     = ${iopt_snf:-"4"}
  iopt_tbot    = ${iopt_tbot:-"2"}
  iopt_stc     = ${iopt_stc:-"1"}
  debug        = ${gfs_phys_debug:-".false."}
  nstf_name    = $nstf_name
  nst_anl      = $nst_anl
  psautco      = ${psautco:-"0.0008,0.0005"}
  prautco      = ${prautco:-"0.00015,0.00015"}
  lgfdlmprad   = ${lgfdlmprad:-".false."}
  effr_in      = ${effr_in:-".false."}
  cplwav       = ${cplwav:-".false."}
  ldiag_ugwp   = ${ldiag_ugwp:-".false."}
  do_ugwp      = ${do_ugwp:-".false."}
  gwd_opt      = ${gwd_opt:-"2"}  
  do_ugwp_v0   = ${do_ugwp_v0:-".true."}                                                                                             
  do_ugwp_v1   = ${do_ugwp_v1:-".false."}                                                                                      
  do_ugwp_v1_w_gsldrag = ${do_ugwp_v1_w_gsldrag:-".false."}
  do_ugwp_v1_orog_only = ${do_ugwp_v1_orog_only:-".false."}                                                                    
  do_gsl_drag_ls_bl = ${do_gsl_drag_ls_bl:-".false."}
  do_gsl_drag_ss = ${do_gsl_drag_ss:-".true."}                                                                                
  do_gsl_drag_tofd = ${do_gsl_drag_tofd:-".true."}
  do_tofd      = ${do_tofd:-".true."}
  do_sppt      = ${do_sppt:-".false."}
  do_shum      = ${do_shum:-".false."}
  do_skeb      = ${do_skeb:-".false."}
EOF

if [ $RUN_CCPP = "YES" ]; then
  cat >> input.nml << EOF
  iovr         = ${iovr:-"3"}
  ltaerosol    = ${ltaerosol:-".false."}
  lradar       = ${lradar:-".false."}
  dt_inner     = ${dt_inner:-"150."}
  ttendlim     = ${ttendlim:-"0.005"}
  oz_phys      = ${oz_phys:-".false."}
  oz_phys_2015 = ${oz_phys_2015:-".true."}
  lsoil_lsm    = ${lsoil_lsm:-"4"}
  do_mynnedmf  = ${do_mynnedmf:-".false."}
  do_mynnsfclay = ${do_mynnsfclay:-".false."}
  icloud_bl    = ${icloud_bl:-"1"}
  bl_mynn_tkebudget = ${bl_mynn_tkebudget:=".false."}
  bl_mynn_tkeadvect = ${bl_mynn_tkeadvect:=".true."}
  bl_mynn_cloudpdf = ${bl_mynn_cloudpdf:="2"}
  bl_mynn_mixlength = ${bl_mynn_mixlength:="1"}
  bl_mynn_edmf = ${bl_mynn_edmf:="1"}
  bl_mynn_edmf_mom = ${bl_mynn_edmf_mom:="1"}
  bl_mynn_edmf_tke = ${bl_mynn_edmf_tke:="0"}
  bl_mynn_cloudmix = ${bl_mynn_cloudmix:="1"}
  bl_mynn_mixqt = ${bl_mynn_mixqt:="0"}
  bl_mynn_output = ${bl_mynn_output:="0"}
  bl_mynn_closure = ${bl_mynn_closure:="2.6"}
  min_lakeice  = ${min_lakeice:-"0.15"}
  min_seaice   = ${min_seaice:-"0.15"}
EOF
else
  cat >> input.nml << EOF
  iovr_lw      = ${iovr_lw:-"3"}
  iovr_sw      = ${iovr_sw:-"3"}
EOF
fi

# Add namelist for IAU
if [ $DOIAU = "YES" ]; then
  cat >> input.nml << EOF
  iaufhrs      = ${IAUFHRS}
  iau_delthrs  = ${IAU_DELTHRS}
  iau_inc_files= ${IAU_INC_FILES}
  iau_drymassfixer = .false.
EOF
fi

cat >> input.nml <<EOF
  $gfs_physics_nml
/
EOF

echo "" >> input.nml

cat >> input.nml <<EOF
&gfdl_cloud_microphysics_nml
  sedi_transport = .true.
  do_sedi_heat = .false.
  rad_snow = .true.
  rad_graupel = .true.
  rad_rain = .true.
  const_vi = .F.
  const_vs = .F.
  const_vg = .F.
  const_vr = .F.
  vi_max = 1.
  vs_max = 2.
  vg_max = 12.
  vr_max = 12.
  qi_lim = 1.
  prog_ccn = .false.
  do_qa = .true.
  fast_sat_adj = .true.
  tau_l2v = 225.
  tau_v2l = 150.
  tau_g2v = 900.
  rthresh = 10.e-6  ! This is a key parameter for cloud water
  dw_land  = 0.16
  dw_ocean = 0.10
  ql_gen = 1.0e-3
  ql_mlt = 1.0e-3
  qi0_crt = 8.0E-5
  qs0_crt = 1.0e-3
  tau_i2s = 1000.
  c_psaci = 0.05
  c_pgacs = 0.01
  rh_inc = 0.30
  rh_inr = 0.30
  rh_ins = 0.30
  ccn_l = 300.
  ccn_o = 100.
  c_paut = 0.5
  c_cracw = 0.8
  use_ppm = .false.
  use_ccn = .true.
  mono_prof = .true.
  z_slope_liq  = .true.
  z_slope_ice  = .true.
  de_ice = .false.
  fix_negative = .true.
  icloud_f = 1
  mp_time = 150.
  reiflag = ${reiflag:-"2"}

  $gfdl_cloud_microphysics_nml
/

&interpolator_nml
  interp_method = 'conserve_great_circle'
  $interpolator_nml
/

&namsfc
  FNGLAC   = '${FNGLAC}'
  FNMXIC   = '${FNMXIC}'
  FNTSFC   = '${FNTSFC}'
  FNSNOC   = '${FNSNOC}'
  FNZORC   = '${FNZORC}'
  FNALBC   = '${FNALBC}'
  FNALBC2  = '${FNALBC2}'
  FNAISC   = '${FNAISC}'
  FNTG3C   = '${FNTG3C}'
  FNVEGC   = '${FNVEGC}'
  FNVETC   = '${FNVETC}'
  FNSOTC   = '${FNSOTC}'
  FNSMCC   = '${FNSMCC}'
  FNMSKH   = '${FNMSKH}'
  FNTSFA   = '${FNTSFA}'
  FNACNA   = '${FNACNA}'
  FNSNOA   = '${FNSNOA}'
  FNVMNC   = '${FNVMNC}'
  FNVMXC   = '${FNVMXC}'
  FNSLPC   = '${FNSLPC}'
  FNABSC   = '${FNABSC}'
  LDEBUG = ${LDEBUG:-".false."}
  FSMCL(2) = ${FSMCL2:-99999}
  FSMCL(3) = ${FSMCL3:-99999}
  FSMCL(4) = ${FSMCL4:-99999}
  LANDICE  = ${landice:-".true."}
  FTSFS = ${FTSFS:-90}
  FAISL = ${FAISL:-99999}
  FAISS = ${FAISS:-99999}
  FSNOL = ${FSNOL:-99999}
  FSNOS = ${FSNOS:-99999}
  FSICL = 99999
  FSICS = 99999
  FTSFL = 99999
  FVETL = 99999
  FSOTL = 99999
  FvmnL = 99999
  FvmxL = 99999
  FSLPL = 99999
  FABSL = 99999
  $namsfc_nml
/

&fv_grid_nml
  grid_file = 'INPUT/grid_spec.nc'
  $fv_grid_nml
/
EOF

# Add namelist for stochastic physics options
echo "" >> input.nml
if [ $MEMBER -gt 0 ]; then

    cat >> input.nml << EOF
&nam_stochy
EOF

  if [ $DO_SKEB = "YES" ]; then
    cat >> input.nml << EOF
  skeb = $SKEB
  iseed_skeb = ${ISEED_SKEB:-$ISEED}
  skeb_tau = ${SKEB_TAU:-"-999."}
  skeb_lscale = ${SKEB_LSCALE:-"-999."}
  skebnorm = ${SKEBNORM:-"1"}
  skeb_npass = ${SKEB_nPASS:-"30"}
  skeb_vdof = ${SKEB_VDOF:-"5"}
EOF
  fi

  if [ $DO_SHUM = "YES" ]; then
    cat >> input.nml << EOF
  shum = $SHUM
  iseed_shum = ${ISEED_SHUM:-$ISEED}
  shum_tau = ${SHUM_TAU:-"-999."}
  shum_lscale = ${SHUM_LSCALE:-"-999."}
EOF
  fi

  if [ $DO_SPPT = "YES" ]; then
    cat >> input.nml << EOF
  sppt = $SPPT
  iseed_sppt = ${ISEED_SPPT:-$ISEED}
  sppt_tau = ${SPPT_TAU:-"-999."}
  sppt_lscale = ${SPPT_LSCALE:-"-999."}
  sppt_logit = ${SPPT_LOGIT:-".true."}
  sppt_sfclimit = ${SPPT_SFCLIMIT:-".true."}
  use_zmtnblck = ${use_zmtnblck:-".true."}
EOF
  fi

  cat >> input.nml << EOF
  $nam_stochy_nml
/
EOF


    cat >> input.nml << EOF
&nam_sfcperts
  $nam_sfcperts_nml
/
EOF

else

  cat >> input.nml << EOF
&nam_stochy
/
&nam_sfcperts
/
EOF

=======
if [ $VERBOSE = "YES" ] ; then
  echo $(date) EXITING $0 with return code $err >&2
>>>>>>> 01mar_commit
fi

if [ $err != 0 ]; then
  echo "MAIN: $confignamevarfornems Forecast failed"
  exit $err
else
  echo "MAIN: $confignamevarfornems Forecast completed at normal status"
  exit 0
fi
