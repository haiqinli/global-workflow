Page 1           Source Listing                                                                
2020-06-15 22:06                                 ecmwfensh.f

ecmwfensh.f(410): warning #8043: The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, jpds, jp...
	      write (*,'(''kpdsread, ichk, jpds, jpds, rjpds ='',
-----------------------------------------------------------------^
ecmwfensh.f(417): warning #8043: The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, jgds, jg...
	      write (*,'(''kpdsread, ichk, jgds, jgds, rjgds ='',
-----------------------------------------------------------------^
ecmwfensh.f(424): warning #8043: The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, jens, je...
	      write (*,'(''kpdsread, ichk, jens, jens, rjens ='',
-----------------------------------------------------------------^
ecmwfensh.f(431): warning #8043: The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, kpds, kp...
	      write (*,'(''kpdsread, ichk, kpds, kpds, rkpds ='',
-----------------------------------------------------------------^
ecmwfensh.f(438): warning #8043: The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, kgds, kg...
	      write (*,'(''kpdsread, ichk, kgds, kgds, rkgds ='',
-----------------------------------------------------------------^
ecmwfensh.f(445): warning #8043: The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, kens, ke...
	      write (*,'(''kpdsread, ichk, kens, kens, rkens ='',
-----------------------------------------------------------------^

Page 2           Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

      1       program ecmwfensh
      2 C$$$  MAIN PROGRAM DOCUMENTATION BLOCK
      3 C
      4 C MAIN PROGRAM: ECMWFENS
      5 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2004-09-12
      6 C
      7 C ABSTRACT: This program converts GRIB ensemble header
      8 c   extensions from ECMWF's format to NCEP's format.  It
      9 c   also calculates ensemble mean and spread fields.
     10 C
     11 C PROGRAM HISTORY LOG:
     12 C   97-01-17  MARCHOK     original program
     13 c   99-09-29  MARCHOK     converted to run on Cray5
     14 c   00-03-17  Wobus       IBM version
     15 C   01-01-16  WOBUS       added DOCBLOCK, removed nonstandard
     16 c                         output
     17 c   04-09-12  Wobus       converted for high resolution
     18 c                         and additional variables
     19 C
     20 C USAGE:
     21 C   INPUT FILES:
     22 c     unit 5   - Namelist NAMIN parameters:  
     23 c                     resflag=2 for 2.5x2.5
     24 c                     maxmem = number of members
     25 c     unit 11  - input GRIB file for one forecast length
     26 c     unit 21  - GRIB index file corresponding to unit 11
     27 C
     28 C   OUTPUT FILES:  (INCLUDING SCRATCH FILES)
     29 C     unit   6 - standard output
     30 C     unit  51 - GRIB output for t200
     31 C     unit 151 - GRIB output for t200 stats
     32 C     unit  52 - GRIB output for t500
     33 C     unit 152 - GRIB output for t500 stats
     34 C     unit  53 - GRIB output for t700
     35 C     unit 153 - GRIB output for t700 stats
     36 C     unit  54 - GRIB output for t850
     37 C     unit 154 - GRIB output for t850 stats
     38 C     unit  55 - GRIB output for t2m
     39 C     unit 155 - GRIB output for t2m stats
     40 C     unit  56 - GRIB output for t2max
     41 C     unit 156 - GRIB output for t2max stats
     42 C     unit  57 - GRIB output for t2min
     43 C     unit 157 - GRIB output for t2min stats
     44 C     unit  58 - GRIB output for td2m
     45 C     unit 158 - GRIB output for td2m stats
     46 C     unit  61 - GRIB output for z200
     47 C     unit 162 - GRIB output for z200 stats
     48 C     unit  62 - GRIB output for z500
     49 C     unit 162 - GRIB output for z500 stats
     50 C     unit  63 - GRIB output for z700
     51 C     unit 162 - GRIB output for z700 stats
     52 C     unit  64 - GRIB output for z850
     53 C     unit 162 - GRIB output for z850 stats
     54 C     unit  65 - GRIB output for z1000
     55 C     unit 165 - GRIB output for z1000 stats
     56 C     unit  71 - GRIB output for rh500
     57 C     unit 171 - GRIB output for rh500 stats

Page 3           Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

     58 C     unit  72 - GRIB output for rh700
     59 C     unit 172 - GRIB output for rh700 stats
     60 C     unit  73 - GRIB output for rh850
     61 C     unit 173 - GRIB output for rh850 stats
     62 C     unit  81 - GRIB output for mslp
     63 C     unit 181 - GRIB output for mslp stats
     64 C     unit  82 - GRIB output for psfc
     65 C     unit 182 - GRIB output for psfc stats
     66 C     unit  83 - GRIB output for prcp
     67 C     unit 183 - GRIB output for prcp stats
     68 C     unit  84 - GRIB output for tcdc 
     69 C     unit 184 - GRIB output for tcdc stats
     70 C     unit 101 - GRIB output for u200
     71 C     unit 102 - GRIB output for v200
     72 C     unit 103 - GRIB output for u500
     73 C     unit 104 - GRIB output for v500
     74 C     unit 105 - GRIB output for u700
     75 C     unit 106 - GRIB output for v700
     76 C     unit 107 - GRIB output for u850
     77 C     unit 108 - GRIB output for v850
     78 C     unit 109 - GRIB output for u10m
     79 C     unit 110 - GRIB output for v10m
     80 C
     81 C   SUBPROGRAMS CALLED: (LIST ALL CALLED FROM ANYWHERE IN CODES)
     82 C     UNIQUE:    - 
     83 c       INCLUDED - create_stats, adjpds, adjext, output, output_stats,
     84 c                  grange, srange, getgbece, ecmext,
     85 c                  grib_close, grib_open, grib_open_wa, grib_open_r
     86 C     LIBRARY:
     87 C       W3LIB    - gbyte,fi632,fi633,w3fi63,w3tagb,w3tage 
     88 c       BACIO    - baopen,baopenwa,baopenr,baclose,baread
     89 C
     90 C   EXIT STATES:
     91 C     COND =   0 - SUCCESSFUL RUN
     92 C
     93 C REMARKS: 
     94 c     Error messages from W3LIB routines will be printed but
     95 c     will not halt execution
     96 C
     97 C ATTRIBUTES:
     98 C   LANGUAGE: Fortran 90
     99 C   MACHINE:  IBM SP
    100 C
    101 C$$$
    102 c
    103 c
    104 c     *** 9/29/99: Due to cray-3 emergency, this program is being
    105 c         implemented on Cray-5 and is being modified to be more
    106 c         efficient.  It doesn't worry about what order the 
    107 c         members are in, it just copies them over.  It still 
    108 c         changes the height level values for the 500 mb height
    109 c         and for mslp for GrADS purposes.  It will leave the 
    110 c         precip fields as they are.
    111 c
    112 c     *** 3/17/00 IBM version
    113 c
    114 c     lugb         logical unit of the unblocked grib data file

Page 4           Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    115 c     lugi         logical unit of the unblocked grib index file
    116 c
    117 c     kres         1 - input file contains only high res control.
    118 c                      This lets the program know that you're reading
    119 c                      a "USD" file.
    120 c                  2 - input file contains low res control and
    121 c                      perturbations.  This lets the program know 
    122 c                      you're reading a "USE" file, which has 1 LRC
    123 c                      record for each parm, plus 50 perturbations
    124 c                      for each parm.
    125 c                 (Important to know since high res control
    126 c                  does NOT have a PDS extension)
    127 c
    128 c     memberct    Keeps track of how many members have been read in
    129 c                 for each parameter.  In this way, we can modify the
    130 c                 height level for each successive member (in our 
    131 c                 kludgy system) to be 1,2,3,....,50,51.  And only
    132 c                 index this as "2" since we are only doing this 
    133 c                 kludgy method to 2 variables, z500 and mslp.
    134 c
    135 c
    136 c
    137       parameter(lugi=21,lugb=11,jf=512*256,nlat=181,nlon=360)
    138       parameter(numec=52)
    139       character*1 contflag
    140       character*1 gott200pds,gott500pds,gott700pds,gott850pds
    141       character*1 gott2mpds,gott2maxpds,gott2minpds,gottd2mpds
    142       character*1 gotz200pds,gotz500pds,gotz700pds,gotz850pds
    143       character*1 gotz1000pds
    144       character*1 gotrh500pds,gotrh700pds,gotrh850pds
    145       character*1 gotmslppds,gotpsfcpds,gotprcppds,gottcdcpds
    146       character*1 gotu200,gotv200
    147       character*1 gotu500,gotv500
    148       character*1 gotu700,gotv700
    149       character*1 gotu850,gotv850
    150       character*1 gotu10m,gotv10m
    151       character*8 newvar
    152       integer   jpds(200),jgds(200),jens(200)
    153       integer   kpds(200),kgds(200),kens(200)
    154 c for overflow test
    155       real      rjpds(204),rjgds(204),rjens(204)
    156       equivalence (jpds(1),rjpds(1))
    157       equivalence (jgds(1),rjgds(1))
    158       equivalence (jens(1),rjens(1))
    159       real      rkpds(204),rkgds(204),rkens(204)
    160       equivalence (kpds(1),rkpds(1))
    161       equivalence (kgds(1),rkgds(1))
    162       equivalence (kens(1),rkens(1))
    163       integer   kholdt200pds(200)
    164       integer   kholdt500pds(200)
    165       integer   kholdt700pds(200)
    166       integer   kholdt850pds(200)
    167       integer   kholdt2mpds(200)
    168       integer   kholdt2maxpds(200)
    169       integer   kholdt2minpds(200)
    170       integer   kholdtd2mpds(200)
    171       integer   kholdz200pds(200)

Page 5           Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    172       integer   kholdz500pds(200)
    173       integer   kholdz700pds(200)
    174       integer   kholdz850pds(200)
    175       integer   kholdz1000pds(200)
    176       integer   kholdrh500pds(200)
    177       integer   kholdrh700pds(200)
    178       integer   kholdrh850pds(200)
    179       integer   kholdmslppds(200)
    180       integer   kholdpsfcpds(200)
    181       integer   kholdprcppds(200)
    182       integer   kholdtcdcpds(200)
    183       integer   memberct(2)
    184       integer   t200ct,t500ct,t700ct,t850ct
    185       integer   t2mct,t2maxct,t2minct,td2mct
    186       integer   z200ct,z500ct,z700ct,z850ct,z1000ct
    187       integer   rh500ct,rh700ct,rh850ct
    188       integer   mslpct,psfcct,prcpct,tcdcct
    189       logical   lb(jf)
    190       real      f(jf)
    191       real      t200vals(numec,nlat*nlon)
    192       real      t200mean(nlat*nlon),t200spr(nlat*nlon)
    193       real      t500vals(numec,nlat*nlon)
    194       real      t500mean(nlat*nlon),t500spr(nlat*nlon)
    195       real      t700vals(numec,nlat*nlon)
    196       real      t700mean(nlat*nlon),t700spr(nlat*nlon)
    197       real      t850vals(numec,nlat*nlon)
    198       real      t850mean(nlat*nlon),t850spr(nlat*nlon)
    199       real      t2mvals(numec,nlat*nlon)
    200       real      t2mmean(nlat*nlon),t2mspr(nlat*nlon)
    201       real      t2maxvals(numec,nlat*nlon)
    202       real      t2maxmean(nlat*nlon),t2maxspr(nlat*nlon)
    203       real      t2minvals(numec,nlat*nlon)
    204       real      t2minmean(nlat*nlon),t2minspr(nlat*nlon)
    205       real      td2mvals(numec,nlat*nlon)
    206       real      td2mmean(nlat*nlon),td2mspr(nlat*nlon)
    207       real      z200vals(numec,nlat*nlon)
    208       real      z200mean(nlat*nlon),z200spr(nlat*nlon)
    209       real      z500vals(numec,nlat*nlon)
    210       real      z500mean(nlat*nlon),z500spr(nlat*nlon)
    211       real      z700vals(numec,nlat*nlon)
    212       real      z700mean(nlat*nlon),z700spr(nlat*nlon)
    213       real      z850vals(numec,nlat*nlon)
    214       real      z850mean(nlat*nlon),z850spr(nlat*nlon)
    215       real      z1000vals(numec,nlat*nlon)
    216       real      z1000mean(nlat*nlon),z1000spr(nlat*nlon)
    217       real      rh500vals(numec,nlat*nlon)
    218       real      rh500mean(nlat*nlon),rh500spr(nlat*nlon)
    219       real      rh700vals(numec,nlat*nlon)
    220       real      rh700mean(nlat*nlon),rh700spr(nlat*nlon)
    221       real      rh850vals(numec,nlat*nlon)
    222       real      rh850mean(nlat*nlon),rh850spr(nlat*nlon)
    223       real      mslpvals(numec,nlat*nlon)
    224       real      mslpmean(nlat*nlon),mslpspr(nlat*nlon)
    225       real      psfcvals(numec,nlat*nlon)
    226       real      psfcmean(nlat*nlon),psfcspr(nlat*nlon)
    227       real      prcpvals(numec,nlat*nlon)
    228       real      prcpmean(nlat*nlon),prcpspr(nlat*nlon)

Page 6           Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    229       real      tcdcvals(numec,nlat*nlon)
    230       real      tcdcmean(nlat*nlon),tcdcspr(nlat*nlon)
    231       namelist/namin/kres,kmaxmem
    232 c
    233       call w3tagb('ECMWFENS',2001,0017,0088,'NP20')
    234 c
    235       read (5,namin,end=1000)
    236  1000 continue
    237 c
    238       print *,' '
    239       print *,'------------------------------------------------------'
    240       print *,'at beginning of ecmwfens.f, kres= ',kres
    241      &       ,' kmaxmem= ',kmaxmem
    242 
    243       t200vals = 0.0
    244       t200mean = 0.0
    245       t200spr =  0.0
    246       t500vals = 0.0
    247       t500mean = 0.0
    248       t500spr =  0.0
    249       t700vals = 0.0
    250       t700mean = 0.0
    251       t700spr =  0.0
    252       t850vals = 0.0
    253       t850mean = 0.0
    254       t850spr =  0.0
    255       t2mvals = 0.0
    256       t2mmean = 0.0
    257       t2mspr =  0.0
    258       t2maxvals = 0.0
    259       t2maxmean = 0.0
    260       t2maxspr =  0.0
    261       t2minvals = 0.0
    262       t2minmean = 0.0
    263       t2minspr =  0.0
    264       td2mvals = 0.0
    265       td2mmean = 0.0
    266       td2mspr =  0.0
    267 
    268       z200vals = 0.0
    269       z200mean = 0.0
    270       z200spr =  0.0
    271       z500vals = 0.0
    272       z500mean = 0.0
    273       z500spr =  0.0
    274       z700vals = 0.0
    275       z700mean = 0.0
    276       z700spr =  0.0
    277       z850vals = 0.0
    278       z850mean = 0.0
    279       z850spr =  0.0
    280       z1000vals = 0.0
    281       z1000mean = 0.0
    282       z1000spr =  0.0
    283 
    284       rh500vals = 0.0
    285       rh500mean = 0.0

Page 7           Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    286       rh500spr =  0.0
    287       rh700vals = 0.0
    288       rh700mean = 0.0
    289       rh700spr =  0.0
    290       rh850vals = 0.0
    291       rh850mean = 0.0
    292       rh850spr =  0.0
    293 
    294       mslpvals = 0.0
    295       mslpmean = 0.0
    296       mslpspr =  0.0
    297       psfcvals = 0.0
    298       psfcmean = 0.0
    299       psfcspr =  0.0
    300       prcpvals = 0.0
    301       prcpmean = 0.0
    302       prcpspr =  0.0
    303       tcdcvals = 0.0
    304       tcdcmean = 0.0
    305       tcdcspr =  0.0
    306 c
    307       gott200pds = 'n'
    308       gott500pds = 'n'
    309       gott700pds = 'n'
    310       gott850pds = 'n'
    311       gott2mpds = 'n'
    312       gott2maxpds = 'n'
    313       gott2minpds = 'n'
    314       gottd2mpds = 'n'
    315 
    316       gotz200pds = 'n'
    317       gotz500pds = 'n'
    318       gotz700pds = 'n'
    319       gotz850pds = 'n'
    320       gotz1000pds = 'n'
    321 
    322       gotrh500pds = 'n'
    323       gotrh700pds = 'n'
    324       gotrh850pds = 'n'
    325 
    326       gotmslppds = 'n'
    327       gotpsfcpds = 'n'
    328       gotprcppds = 'n'
    329       gottcdcpds = 'n'
    330 c
    331       t200ct = 0
    332       t500ct = 0
    333       t700ct = 0
    334       t850ct = 0
    335       t2mct = 0
    336       t2maxct = 0
    337       t2minct = 0
    338       td2mct = 0
    339 
    340       z200ct = 0
    341       z500ct = 0
    342       z700ct = 0

Page 8           Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    343       z850ct = 0
    344       z1000ct = 0
    345 
    346       rh500ct = 0
    347       rh700ct = 0
    348       rh850ct = 0
    349 
    350       mslpct = 0
    351       psfcct = 0
    352       prcpct = 0
    353       tcdcct = 0
    354  
    355 c     maxloop = number of perturbations + the LRC record.  Remember, 
    356 c     the HRC record is in a file by itself, and is handled by the 
    357 c     case of kres=1.
    358 
    359       maxloop = kmaxmem + 1
    360       jpds = -1
    361       jgds = -1
    362       jens = -1
    363       jpds(23) = 0
    364       kgds = 0
    365       memberct = 0
    366 
    367       kpdsread = 0
    368 
    369 c      jpds(23) = 0
    370       j = 0
    371       iret = 0
    372 
    373       print *,' '
    374       do while (iret.eq.0)
    375  
    376 	kpdsnull = -kpdsread
    377 	kpds = kpdsnull
    378 	kens = kpdsnull
    379 
    380 c       Use my modified version of getgbens in this program to 
    381 c       read the recs.  This version of getgbens reads different
    382 c       bytes from the ECMWF PDS extension than are read from the 
    383 c       NCEP PDS extension. *** NOTE: THE VERSION OF GETGBENS 
    384 c       THAT IS CALLED HAS BEEN MODIFIED FROM THE W3LIB VERSION.
    385 c  Modified getgbens has been renamed getgbece
    386 
    387         call getgbece(lugb,lugi,jf,j,jpds,jgds,jens,
    388      &                          kf,k,kpds,kgds,kens,lb,f,iret,
    389      &                          ktype,kfnum,ktot)
    390 c check for kpds written out of bounds
    391         if (kpdsread.lt.10) then
    392 	  print *,' '
    393 	  print *,'check kpds before processing'
    394 	  write(*,71) (kpds(mm),mm=1,5) 
    395 	  write(*,72) (kpds(mm),mm=6,10) 
    396 	  write(*,73) (kpds(mm),mm=11,15) 
    397 	  write(*,74) (kpds(mm),mm=16,20) 
    398 	  write(*,75) (kpds(mm),mm=21,25) 
    399 	  write(*,76) (kgds(mm),mm=1,5) 

Page 9           Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    400 	  write(*,77) (kgds(mm),mm=6,10) 
    401 	  write(*,78) (kgds(mm),mm=11,15) 
    402 	  write(*,79) (kgds(mm),mm=16,20) 
    403 	  write(*,80) (kgds(mm),mm=21,22) 
    404 	  write(*,81) f(1),f(kf/4),f(kf/2)
    405      &               ,f(3*kf/4),f(kf)
    406 	  call srange(kf,lb,f)
    407 c for overflow test
    408 	  do ichk=26,200
    409 	    if ( jpds(ichk) .ne. -1 ) then
    410 	      write (*,'(''kpdsread, ichk, jpds, jpds, rjpds ='',
	..................................................................
(1) The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, jpds, jpds, rjpds =',   ]

    411      &                i3,i4,i23,z17,1pe32.23))')
    412      &               kpdsread,ichk,jpds(ichk),jpds(ichk),rjpds(ichk)
    413 	    endif
    414 	  enddo
    415 	  do ichk=23,200
    416 	    if ( jgds(ichk) .ne. -1 ) then
    417 	      write (*,'(''kpdsread, ichk, jgds, jgds, rjgds ='',
	..................................................................
(1) The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, jgds, jgds, rjgds =',   ]

    418      &                i3,i4,i23,z17,1pe32.23))')
    419      &               kpdsread,ichk,jgds(ichk),jgds(ichk),rjgds(ichk)
    420 	    endif
    421 	  enddo
    422 	  do ichk=6,200
    423 	    if ( jens(ichk) .ne. -1 ) then
    424 	      write (*,'(''kpdsread, ichk, jens, jens, rjens ='',
	..................................................................
(1) The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, jens, jens, rjens =',   ]

    425      &                i3,i4,i23,z17,1pe32.23))')
    426      &               kpdsread,ichk,jens(ichk),jens(ichk),rjens(ichk)
    427 	    endif
    428 	  enddo
    429 	  do ichk=26,200
    430 	    if ( kpds(ichk) .ne. kpdsnull ) then
    431 	      write (*,'(''kpdsread, ichk, kpds, kpds, rkpds ='',
	..................................................................
(1) The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, kpds, kpds, rkpds =',   ]

    432      &                i3,i4,i23,z17,1pe32.23))')
    433      &               kpdsread,ichk,kpds(ichk),kpds(ichk),rkpds(ichk)
    434 	    endif
    435 	  enddo
    436 	  do ichk=23,200
    437 	    if ( kgds(ichk) .ne. 0 ) then
    438 	      write (*,'(''kpdsread, ichk, kgds, kgds, rkgds ='',
	..................................................................
(1) The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, kgds, kgds, rkgds =',   ]

    439      &                i3,i4,i23,z17,1pe32.23))')
    440      &               kpdsread,ichk,kgds(ichk),kgds(ichk),rkgds(ichk)
    441 	    endif

Page 10          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    442 	  enddo
    443 	  do ichk=6,200
    444 	    if ( kens(ichk) .ne. kpdsnull ) then
    445 	      write (*,'(''kpdsread, ichk, kens, kens, rkens ='',
	..................................................................
(1) The extra characters in the format specification will be ignored.   ['('kpdsread, ichk, kens, kens, rkens =',   ]

    446      &                i3,i4,i23,z17,1pe32.23))')
    447      &               kpdsread,ichk,kens(ichk),kens(ichk),rkens(ichk)
    448 	    endif
    449 	  enddo
    450 	endif
    451 	kpdsread=kpdsread+1
    452 c
    453         j=k
    454 c       print *,' '
    455         if (iret.eq.0) then
    456 	  print *,'immediately after call to getgb, j=',j
    457      &          ,' k=',k,' kpds(5)=',kpds(5)
    458      &          ,' kpds(14)=',kpds(14),' kfnum=',kfnum
    459      &          ,' iret=',iret
    460 	  if ((kfnum.le.2).or.(kfnum.ge.49)) then
    461 	    if ((kpds(14).le.24).or.(kpds(14).ge.228)) then
    462 c             print *,' '
    463               call srange(kf,lb,f)
    464 	      call grange(kf,lb,f,dmin,dmax)
    465 	      print '(4i5,4i3,2x,a1,i3,3i5,2x,i7,2g12.4)'
    466      &              ,k,(kpds(i),i=5,11),'f',kpds(14),ktype,kfnum
    467      &              ,ktot,kf,dmin,dmax
    468 	    endif
    469 	  endif
    470         else
    471           print *,'!!! getgb IRET= ',iret,'   j= ',j
    472      &           ,' .... Continuing to next loop iteration ....'
    473           goto 600
    474         endif
    475  
    476         call adjpds (kpds,contflag,lugout,memberct)
    477 
    478         if (contflag.eq.'n') goto 600
    479 
    480       call grib_open_wa (lugout,ireto)
    481       if (ireto.gt.0) then
    482         print *,'ireto,lu from grib_open_wa in ecmwfens = ',ireto,lugout
    483       endif
    484  
    485         call adjext (kens,ktype,kfnum,kres)
    486  
    487 c	if ((kfnum.le.2).or.(kfnum.ge.49)) then
    488 c	  if ((kpds(14).le.24).or.(kpds(14).ge.228)) then
    489 c           print *,' '
    490 c	    write(*,71) (kpds(mm),mm=1,5) 
    491 c	    write(*,72) (kpds(mm),mm=6,10) 
    492 c	    write(*,73) (kpds(mm),mm=11,15) 
    493 c	    write(*,74) (kpds(mm),mm=16,20) 
    494 c	    write(*,75) (kpds(mm),mm=21,25) 
    495 c	    write(*,76) (kgds(mm),mm=1,5) 

Page 11          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    496 c	    write(*,77) (kgds(mm),mm=6,10) 
    497 c	    write(*,78) (kgds(mm),mm=11,15) 
    498 c	    write(*,79) (kgds(mm),mm=16,20) 
    499 c	    write(*,80) (kgds(mm),mm=21,22) 
    500 c	    write(*,81) f(1),f(kf/4),f(kf/2)
    501 c    &                 ,f(3*kf/4),f(kf)
    502 c	    call srange(kf,lb,f)
    503 c	  endif
    504 c	endif
    505 
    506         kpds(23)=2
    507 
    508         newvar = 'none'
    509 
    510         if (kpds(5) .eq. 61) then
    511           if (gotprcppds .eq. 'n') then
    512             gotprcppds = 'y'
    513 	    newvar = 'prcp    '
    514             do i = 1,25
    515               kholdprcppds(i) = kpds(i)
    516             enddo
    517           endif
    518           prcpct = prcpct + 1
    519           do ip = 1,kf
    520             f(ip) = f(ip) * 1000.0
    521             prcpvals(prcpct,ip) = prcpvals(prcpct,ip) + f(ip)
    522           enddo
    523         else if (kpds(5) .eq. 2) then
    524           if (gotmslppds .eq. 'n') then
    525             gotmslppds = 'y'
    526 	    newvar = 'mslp    '
    527             do i = 1,25
    528               kholdmslppds(i) = kpds(i)
    529             enddo 
    530           endif
    531 	    call srange(kf,lb,f)
    532           mslpct = mslpct + 1
    533           do ip = 1,kf
    534             mslpvals(mslpct,ip) = mslpvals(mslpct,ip) + f(ip)
    535           enddo
    536         else if (kpds(5) .eq. 11) then
    537          if (kpds(7) .eq. 850) then
    538           if (gott850pds .eq. 'n') then
    539             gott850pds = 'y'
    540 	    newvar = 't850    '
    541             do i = 1,25
    542               kholdt850pds(i) = kpds(i)
    543             enddo
    544           endif
    545           t850ct = t850ct + 1
    546           do ip = 1,kf
    547             t850vals(t850ct,ip) = t850vals(t850ct,ip) + f(ip)
    548           enddo
    549          else if (kpds(7) .eq. 700) then
    550           if (gott700pds .eq. 'n') then
    551             gott700pds = 'y'
    552 	    newvar = 't700    '

Page 12          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    553             do i = 1,25
    554               kholdt700pds(i) = kpds(i)
    555             enddo
    556           endif
    557           t700ct = t700ct + 1
    558           do ip = 1,kf
    559             t700vals(t700ct,ip) = t700vals(t700ct,ip) + f(ip)
    560           enddo
    561          else if (kpds(7) .eq. 500) then
    562           if (gott500pds .eq. 'n') then
    563             gott500pds = 'y'
    564 	    newvar = 't500    '
    565             do i = 1,25
    566               kholdt500pds(i) = kpds(i)
    567             enddo
    568           endif
    569           t500ct = t500ct + 1
    570           do ip = 1,kf
    571             t500vals(t500ct,ip) = t500vals(t500ct,ip) + f(ip)
    572           enddo
    573          else if (kpds(7) .eq. 200) then
    574           if (gott200pds .eq. 'n') then
    575             gott200pds = 'y'
    576 	    newvar = 't200    '
    577             do i = 1,25
    578               kholdt200pds(i) = kpds(i)
    579             enddo
    580           endif
    581           t200ct = t200ct + 1
    582           do ip = 1,kf
    583             t200vals(t200ct,ip) = t200vals(t200ct,ip) + f(ip)
    584           enddo
    585          else if (kpds(7) .eq. 2) then
    586           if (gott2mpds .eq. 'n') then
    587             gott2mpds = 'y'
    588 	    newvar = 't2m     '
    589             do i = 1,25
    590               kholdt2mpds(i) = kpds(i)
    591             enddo
    592           endif
    593           t2mct = t2mct + 1
    594           do ip = 1,kf
    595             t2mvals(t2mct,ip) = t2mvals(t2mct,ip) + f(ip)
    596           enddo
    597 	 endif 
    598 c new batch 01/04
    599         else if (kpds(5) .eq. 15) then
    600          if (kpds(7) .eq. 2) then
    601           if (gott2maxpds .eq. 'n') then
    602             gott2maxpds = 'y'
    603 	    newvar = 't2max   '
    604             do i = 1,25
    605               kholdt2maxpds(i) = kpds(i)
    606             enddo
    607           endif
    608           t2maxct = t2maxct + 1
    609           do ip = 1,kf

Page 13          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    610             t2maxvals(t2maxct,ip) = t2maxvals(t2maxct,ip) + f(ip)
    611           enddo
    612 	 endif 
    613         else if (kpds(5) .eq. 16) then
    614          if (kpds(7) .eq. 2) then
    615           if (gott2minpds .eq. 'n') then
    616             gott2minpds = 'y'
    617 	    newvar = 't2min   '
    618             do i = 1,25
    619               kholdt2minpds(i) = kpds(i)
    620             enddo
    621           endif
    622           t2minct = t2minct + 1
    623           do ip = 1,kf
    624             t2minvals(t2minct,ip) = t2minvals(t2minct,ip) + f(ip)
    625           enddo
    626 	 endif 
    627         else if (kpds(5) .eq. 17) then
    628          if (kpds(7) .eq. 2) then
    629           if (gottd2mpds .eq. 'n') then
    630             gottd2mpds = 'y'
    631 	    newvar = 'td2m    '
    632             do i = 1,25
    633               kholdtd2mpds(i) = kpds(i)
    634             enddo
    635           endif
    636           td2mct = td2mct + 1
    637           do ip = 1,kf
    638             td2mvals(td2mct,ip) = td2mvals(td2mct,ip) + f(ip)
    639           enddo
    640 	 endif 
    641         else if (kpds(5) .eq. 1) then
    642          if (kpds(7) .eq. 0) then
    643           if (gotpsfcpds .eq. 'n') then
    644             gotpsfcpds = 'y'
    645 	    newvar = 'psfc    '
    646             do i = 1,25
    647               kholdpsfcpds(i) = kpds(i)
    648             enddo
    649           endif
    650           psfcct = psfcct + 1
    651           do ip = 1,kf
    652 cJ.Peng---2011-05-17------------NCO change Surface Pressure----
    653 c           f(ip) = exp(f(ip))
    654 
    655             psfcvals(psfcct,ip) = psfcvals(psfcct,ip) + f(ip)
    656           enddo
    657 	 endif 
    658         else if (kpds(5) .eq. 71) then
    659          if (kpds(7) .eq. 0) then
    660           if (gottcdcpds .eq. 'n') then
    661             gottcdcpds = 'y'
    662 	    newvar = 'tcdc    '
    663             do i = 1,25
    664               kholdtcdcpds(i) = kpds(i)
    665             enddo
    666           endif

Page 14          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    667           tcdcct = tcdcct + 1
    668           do ip = 1,kf
    669 	    f(ip) = f(ip) * 100.0
    670             tcdcvals(tcdcct,ip) = tcdcvals(tcdcct,ip) + f(ip)
    671           enddo
    672 	 endif 
    673         else if (kpds(5) .eq. 7) then
    674          if (kpds(7) .eq. 1000) then
    675           if (gotz1000pds .eq. 'n') then
    676             gotz1000pds = 'y'
    677 	    newvar = 'z1000   '
    678             do i = 1,25
    679               kholdz1000pds(i) = kpds(i)
    680             enddo 
    681           endif
    682           z1000ct = z1000ct + 1
    683           do ip = 1,kf
    684             z1000vals(z1000ct,ip) = z1000vals(z1000ct,ip) + f(ip)
    685           enddo
    686          else if (kpds(7).eq.850) then
    687           if (gotz850pds .eq. 'n') then
    688             gotz850pds = 'y'
    689 	    newvar = 'z850    '
    690             do i = 1,25
    691               kholdz850pds(i) = kpds(i)
    692             enddo 
    693           endif
    694           z850ct = z850ct + 1
    695           do ip = 1,kf
    696             z850vals(z850ct,ip) = z850vals(z850ct,ip) + f(ip)
    697           enddo
    698          else if (kpds(7).eq.700) then
    699           if (gotz700pds .eq. 'n') then
    700             gotz700pds = 'y'
    701 	    newvar = 'z700    '
    702             do i = 1,25
    703               kholdz700pds(i) = kpds(i)
    704             enddo 
    705           endif
    706           z700ct = z700ct + 1
    707           do ip = 1,kf
    708             z700vals(z700ct,ip) = z700vals(z700ct,ip) + f(ip)
    709           enddo
    710          else if (kpds(7).eq.500) then
    711           if (gotz500pds .eq. 'n') then
    712             gotz500pds = 'y'
    713 	    newvar = 'z500    '
    714             do i = 1,25
    715               kholdz500pds(i) = kpds(i)
    716             enddo 
    717           endif
    718           z500ct = z500ct + 1
    719           do ip = 1,kf
    720             z500vals(z500ct,ip) = z500vals(z500ct,ip) + f(ip)
    721           enddo
    722          else if (kpds(7).eq.200) then
    723           if (gotz200pds .eq. 'n') then

Page 15          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    724             gotz200pds = 'y'
    725 	    newvar = 'z200    '
    726             do i = 1,25
    727               kholdz200pds(i) = kpds(i)
    728             enddo 
    729           endif
    730           z200ct = z200ct + 1
    731           do ip = 1,kf
    732             z200vals(z200ct,ip) = z200vals(z200ct,ip) + f(ip)
    733           enddo
    734          endif
    735         else if (kpds(5) .eq. 52) then
    736          if (kpds(7) .eq. 850) then
    737           if (gotrh850pds .eq. 'n') then
    738             gotrh850pds = 'y'
    739 	    newvar = 'rh850   '
    740             do i = 1,25
    741               kholdrh850pds(i) = kpds(i)
    742             enddo
    743           endif
    744           rh850ct = rh850ct + 1
    745           do ip = 1,kf
    746             rh850vals(rh850ct,ip) = rh850vals(rh850ct,ip) + f(ip)
    747           enddo
    748          else if (kpds(7) .eq. 700) then
    749           if (gotrh700pds .eq. 'n') then
    750             gotrh700pds = 'y'
    751 	    newvar = 'rh700   '
    752             do i = 1,25
    753               kholdrh700pds(i) = kpds(i)
    754             enddo
    755           endif
    756           rh700ct = rh700ct + 1
    757           do ip = 1,kf
    758             rh700vals(rh700ct,ip) = rh700vals(rh700ct,ip) + f(ip)
    759           enddo
    760          else if (kpds(7) .eq. 500) then
    761           if (gotrh500pds .eq. 'n') then
    762             gotrh500pds = 'y'
    763 	    newvar = 'rh500   '
    764             do i = 1,25
    765               kholdrh500pds(i) = kpds(i)
    766             enddo
    767           endif
    768           rh500ct = rh500ct + 1
    769           do ip = 1,kf
    770             rh500vals(rh500ct,ip) = rh500vals(rh500ct,ip) + f(ip)
    771           enddo
    772 	 endif
    773 	else if (kpds(5) .eq. 33) then
    774          if (kpds(7) .eq. 200) then
    775           if (gotu200 .eq. 'n') then
    776             gotu200 = 'y'
    777             newvar = 'u200'
    778           endif
    779          else if (kpds(7) .eq. 500) then
    780           if (gotu500 .eq. 'n') then

Page 16          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    781             gotu500 = 'y'
    782             newvar = 'u500'
    783           endif
    784          else if (kpds(7) .eq. 700) then
    785           if (gotu700 .eq. 'n') then
    786             gotu700 = 'y'
    787             newvar = 'u700'
    788           endif
    789          else if (kpds(7) .eq. 850) then
    790           if (gotu850 .eq. 'n') then
    791             gotu850 = 'y'
    792             newvar = 'u850'
    793           endif
    794          else if (kpds(7) .eq. 10) then
    795           if (gotu10m .eq. 'n') then
    796             gotu10m = 'y'
    797             newvar = 'u10m'
    798           endif
    799          endif
    800 	else if (kpds(5) .eq. 34) then
    801          if (kpds(7) .eq. 200) then
    802           if (gotv200 .eq. 'n') then
    803             gotv200 = 'y'
    804             newvar = 'v200'
    805           endif
    806          else if (kpds(7) .eq. 500) then
    807           if (gotv500 .eq. 'n') then
    808             gotv500 = 'y'
    809             newvar = 'v500'
    810           endif
    811          else if (kpds(7) .eq. 700) then
    812           if (gotv700 .eq. 'n') then
    813             gotv700 = 'y'
    814             newvar = 'v700'
    815           endif
    816          else if (kpds(7) .eq. 850) then
    817           if (gotv850 .eq. 'n') then
    818             gotv850 = 'y'
    819             newvar = 'v850'
    820           endif
    821          else if (kpds(7) .eq. 10) then
    822           if (gotv10m .eq. 'n') then
    823             gotv10m = 'y'
    824             newvar = 'v10m'
    825           endif
    826          endif
    827         endif
    828 
    829         if ( newvar .ne. 'none') then
    830           print *,'new variable ',newvar
    831           call srange(kf,lb,f)
    832 	  call grange(kf,lb,f,dmin,dmax)
    833 	  print '(4i5,4i3,2x,a1,i3,3i5,2x,i7,2g12.4)'
    834      &              ,k,(kpds(i),i=5,11),'f',kpds(14),ktype,kfnum
    835      &              ,ktot,kf,dmin,dmax
    836 	  write(*,71) (kpds(mm),mm=1,5) 
    837 	  write(*,72) (kpds(mm),mm=6,10) 

Page 17          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    838 	  write(*,73) (kpds(mm),mm=11,15) 
    839 	  write(*,74) (kpds(mm),mm=16,20) 
    840 	  write(*,75) (kpds(mm),mm=21,25) 
    841 	  write(*,76) (kgds(mm),mm=1,5) 
    842 	  write(*,77) (kgds(mm),mm=6,10) 
    843 	  write(*,78) (kgds(mm),mm=11,15) 
    844 	  write(*,79) (kgds(mm),mm=16,20) 
    845 	  write(*,80) (kgds(mm),mm=21,22) 
    846 	  write(*,81) f(1),f(kf/4),f(kf/2)
    847      &                 ,f(3*kf/4),f(kf)
    848         endif
    849 
    850         call output (lugout,kf,kpds,kgds,lb,f,kens)
    851 
    852 	call grib_close (lugout,ireto)
    853 	if (ireto.gt.0) then
    854 	  print *,'ireto,lu from grib_close in ecmwfens = ',ireto,lugout
    855 	endif
    856       
    857 
    858         if ( newvar .ne. 'none') then
    859 	  print *,' '
    860         endif
    861  
    862  600    continue
    863 
    864       enddo
    865       call grib_close (lugb,ireto)
    866       if (ireto.gt.0) then
    867         print *,'ireto,lu from grib_close in ecmwfens = ',ireto,lugb
    868       endif
    869       call grib_close (lugi,ireto)
    870       if (ireto.gt.0) then
    871         print *,'ireto,lu from grib_close in ecmwfens = ',ireto,lugi
    872       endif
    873 
    874       if (gott200pds .eq. 'y') then
    875       call create_stats (numec,nlat,nlon
    876      &                  ,t200ct,t200vals,t200mean,t200spr) 
    877       call output_stats ('t200',151,nlat*nlon,kholdt200pds,kgds
    878      &                  ,lb,t200mean,t200spr)
    879       else
    880 	print *,'no statistics for t200'
    881       endif
    882       if (gott500pds .eq. 'y') then
    883       call create_stats (numec,nlat,nlon
    884      &                  ,t500ct,t500vals,t500mean,t500spr) 
    885       call output_stats ('t500',152,nlat*nlon,kholdt500pds,kgds
    886      &                  ,lb,t500mean,t500spr)
    887       else
    888 	print *,'no statistics for t500'
    889       endif
    890       if (gott700pds .eq. 'y') then
    891       call create_stats (numec,nlat,nlon
    892      &                  ,t700ct,t700vals,t700mean,t700spr) 
    893       call output_stats ('t700',153,nlat*nlon,kholdt700pds,kgds
    894      &                  ,lb,t700mean,t700spr)

Page 18          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    895       else
    896 	print *,'no statistics for t700'
    897       endif
    898       if (gott850pds .eq. 'y') then
    899       call create_stats (numec,nlat,nlon
    900      &                  ,t850ct,t850vals,t850mean,t850spr) 
    901       call output_stats ('t850',154,nlat*nlon,kholdt850pds,kgds
    902      &                  ,lb,t850mean,t850spr)
    903       else
    904 	print *,'no statistics for t850'
    905       endif
    906       if (gott2mpds .eq. 'y') then
    907       call create_stats (numec,nlat,nlon
    908      &                  ,t2mct,t2mvals,t2mmean,t2mspr) 
    909       call output_stats ('t2m ',155,nlat*nlon,kholdt2mpds,kgds
    910      &                  ,lb,t2mmean,t2mspr)
    911       else
    912 	print *,'no statistics for t2m'
    913       endif
    914       if (gott2maxpds .eq. 'y') then
    915       call create_stats (numec,nlat,nlon
    916      &                  ,t2maxct,t2maxvals,t2maxmean,t2maxspr) 
    917       call output_stats ('t2mx',156,nlat*nlon,kholdt2maxpds,kgds
    918      &                  ,lb,t2maxmean,t2maxspr)
    919       else
    920 	print *,'no statistics for t2max'
    921       endif
    922       if (gott2minpds .eq. 'y') then
    923       call create_stats (numec,nlat,nlon
    924      &                  ,t2minct,t2minvals,t2minmean,t2minspr) 
    925       call output_stats ('t2mn',157,nlat*nlon,kholdt2minpds,kgds
    926      &                  ,lb,t2minmean,t2minspr)
    927       else
    928 	print *,'no statistics for t2min'
    929       endif
    930       if (gottd2mpds .eq. 'y') then
    931       call create_stats (numec,nlat,nlon
    932      &                  ,td2mct,td2mvals,td2mmean,td2mspr) 
    933       call output_stats ('td2m',158,nlat*nlon,kholdtd2mpds,kgds
    934      &                  ,lb,td2mmean,td2mspr)
    935       else
    936 	print *,'no statistics for td2m'
    937       endif
    938 
    939       if (gotz200pds .eq. 'y') then
    940       call create_stats (numec,nlat,nlon
    941      &                  ,z200ct,z200vals,z200mean,z200spr) 
    942       call output_stats ('z200',161,nlat*nlon,kholdz200pds,kgds
    943      &                  ,lb,z200mean,z200spr)
    944       else
    945 	print *,'no statistics for z200'
    946       endif
    947       if (gotz500pds .eq. 'y') then
    948       call create_stats (numec,nlat,nlon
    949      &                  ,z500ct,z500vals,z500mean,z500spr) 
    950       call output_stats ('z500',162,nlat*nlon,kholdz500pds,kgds
    951      &                  ,lb,z500mean,z500spr)

Page 19          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

    952       else
    953 	print *,'no statistics for z500'
    954       endif
    955       if (gotz700pds .eq. 'y') then
    956       call create_stats (numec,nlat,nlon
    957      &                  ,z700ct,z700vals,z700mean,z700spr) 
    958       call output_stats ('z700',163,nlat*nlon,kholdz700pds,kgds
    959      &                  ,lb,z700mean,z700spr)
    960       else
    961 	print *,'no statistics for z700'
    962       endif
    963       if (gotz850pds .eq. 'y') then
    964       call create_stats (numec,nlat,nlon
    965      &                  ,z850ct,z850vals,z850mean,z850spr) 
    966       call output_stats ('z850',164,nlat*nlon,kholdz850pds,kgds
    967      &                  ,lb,z850mean,z850spr)
    968       else
    969 	print *,'no statistics for z850'
    970       endif
    971       if (gotz1000pds .eq. 'y') then
    972       call create_stats (numec,nlat,nlon
    973      &                  ,z1000ct,z1000vals,z1000mean,z1000spr) 
    974       call output_stats ('z1k ',165,nlat*nlon,kholdz1000pds,kgds
    975      &                  ,lb,z1000mean,z1000spr)
    976       else
    977 	print *,'no statistics for z1000'
    978       endif
    979 
    980       if (gotrh500pds .eq. 'y') then
    981       call create_stats (numec,nlat,nlon
    982      &                  ,rh500ct,rh500vals,rh500mean,rh500spr) 
    983       call output_stats ('r500',171,nlat*nlon,kholdrh500pds,kgds
    984      &                  ,lb,rh500mean,rh500spr)
    985       else
    986 	print *,'no statistics for rh500'
    987       endif
    988       if (gotrh700pds .eq. 'y') then
    989       call create_stats (numec,nlat,nlon
    990      &                  ,rh700ct,rh700vals,rh700mean,rh700spr) 
    991       call output_stats ('r700',172,nlat*nlon,kholdrh700pds,kgds
    992      &                  ,lb,rh700mean,rh700spr)
    993       else
    994 	print *,'no statistics for rh700'
    995       endif
    996       if (gotrh850pds .eq. 'y') then
    997       call create_stats (numec,nlat,nlon
    998      &                  ,rh850ct,rh850vals,rh850mean,rh850spr) 
    999       call output_stats ('r850',173,nlat*nlon,kholdrh850pds,kgds
   1000      &                  ,lb,rh850mean,rh850spr)
   1001       else
   1002 	print *,'no statistics for rh850'
   1003       endif
   1004 
   1005       if (gotmslppds .eq. 'y') then
   1006       call create_stats (numec,nlat,nlon
   1007      &                  ,mslpct,mslpvals,mslpmean,mslpspr) 
   1008       call output_stats ('mslp',181,nlat*nlon,kholdmslppds,kgds

Page 20          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

   1009      &                  ,lb,mslpmean,mslpspr)
   1010       else
   1011 	print *,'no statistics for mslp'
   1012       endif
   1013       if (gotpsfcpds .eq. 'y') then
   1014       call create_stats (numec,nlat,nlon
   1015      &                  ,psfcct,psfcvals,psfcmean,psfcspr) 
   1016       call output_stats ('psfc',182,nlat*nlon,kholdpsfcpds,kgds
   1017      &                  ,lb,psfcmean,psfcspr)
   1018       else
   1019 	print *,'no statistics for psfc'
   1020       endif
   1021       if (gotprcppds .eq. 'y') then
   1022       call create_stats (numec,nlat,nlon
   1023      &                  ,prcpct,prcpvals,prcpmean,prcpspr) 
   1024       call output_stats ('prcp',183,nlat*nlon,kholdprcppds,kgds
   1025      &                  ,lb,prcpmean,prcpspr)
   1026       else
   1027 	print *,'no statistics for prcp'
   1028       endif
   1029       if (gottcdcpds .eq. 'y') then
   1030       call create_stats (numec,nlat,nlon
   1031      &                  ,tcdcct,tcdcvals,tcdcmean,tcdcspr) 
   1032       call output_stats ('tcdc',184,nlat*nlon,kholdtcdcpds,kgds
   1033      &                  ,lb,tcdcmean,tcdcspr)
   1034       else
   1035 	print *,'no statistics for tcdc'
   1036       endif
   1037  
   1038  71   format('p1=  ',i7,' p2=  ',i7,' p3=  ',i7,' p4=  ',i7,' p5=  ',i7)
   1039  72   format('p6=  ',i7,' p7=  ',i7,' p8=  ',i7,' p9=  ',i7,' p10= ',i7)
   1040  73   format('p11= ',i7,' p12= ',i7,' p13= ',i7,' p14= ',i7,' p15= ',i7)
   1041  74   format('p16= ',i7,' p17= ',i7,' p18= ',i7,' p19= ',i7,' p20= ',i7)
   1042  75   format('p21= ',i7,' p22= ',i7,' p23= ',i7,' p24= ',i7,' p25= ',i7)
   1043  76   format('g1=  ',i7,' g2=  ',i7,' g3=  ',i7,' g4=  ',i7,' g5=  ',i7)
   1044  77   format('g6=  ',i7,' g7=  ',i7,' g8=  ',i7,' g9=  ',i7,' g10= ',i7)
   1045  78   format('g11= ',i7,' g12= ',i7,' g13= ',i7,' g14= ',i7,' g15= ',i7)
   1046  79   format('g16= ',i7,' g17= ',i7,' g18= ',i7,' g19= ',i7,' g20= ',i7)
   1047  80   format('g21= ',i7,' g22= ',i7)
   1048  81   format('f(1)= ',g12.4,' f(kf/4)= ',g12.4,' f(kf/2)= ',g12.4
   1049      &      ,' f(3*kf/4)= ',g12.4,' f(kf)= ',g12.4)
   1050 c
   1051  700  continue
   1052       call w3tage('ECMWFENS')
   1053       stop
   1054       end

Page 21          Source Listing                  ECMWFENSH
2020-06-15 22:06 Entry Points                    ecmwfensh.f



ENTRY POINTS

  Name              
                    
 MAIN__             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 1000                       Label  236                                                            235                               
 600                        Label  862                                                            473,478                           
 700                        Label  1051                                                                                             
 71                         Label  1038                                                           394,836                           
 72                         Label  1039                                                           395,837                           
 73                         Label  1040                                                           396,838                           
 74                         Label  1041                                                           397,839                           
 75                         Label  1042                                                           398,840                           
 76                         Label  1043                                                           399,841                           
 77                         Label  1044                                                           400,842                           
 78                         Label  1045                                                           401,843                           
 79                         Label  1046                                                           402,844                           
 80                         Label  1047                                                           403,845                           
 81                         Label  1048                                                           404,846                           
 ADJEXT                     Subr   485                                                            485                               
 ADJPDS                     Subr   476                                                            476                               
 CONTFLAG                   Local  139      CHAR            1           scalar                    476,478                           
 CREATE_STATS               Subr   875                                                            875,883,891,899,907,915,923,931,94
                                                                                                  0,948,956,964,972,981,989,997,1006
                                                                                                  ,1014,1022,1030                   
 DMAX                       Local  464      R(8)            8           scalar                    464,467,832,835                   
 DMIN                       Local  464      R(8)            8           scalar                    464,467,832,835                   
 ECMWFENSH                  Prog   1                                                                                                
 F                          Local  190      R(8)            8     1     131072                    388,404,405,406,463,464,520,521,53
                                                                                                  1,534,547,559,571,583,595,610,624,
                                                                                                  638,655,669,670,684,696,708,720,73
                                                                                                  2,746,758,770,831,832,846,847,850 
 GETGBECE                   Subr   387                                                            387                               
 GOTMSLPPDS                 Local  145      CHAR            1           scalar                    326,524,525,1005                  
 GOTPRCPPDS                 Local  145      CHAR            1           scalar                    328,511,512,1021                  
 GOTPSFCPDS                 Local  145      CHAR            1           scalar                    327,643,644,1013                  
 GOTRH500PDS                Local  144      CHAR            1           scalar                    322,761,762,980                   
 GOTRH700PDS                Local  144      CHAR            1           scalar                    323,749,750,988                   
 GOTRH850PDS                Local  144      CHAR            1           scalar                    324,737,738,996                   
 GOTT200PDS                 Local  140      CHAR            1           scalar                    307,574,575,874                   
 GOTT2MAXPDS                Local  141      CHAR            1           scalar                    312,601,602,914                   
 GOTT2MINPDS                Local  141      CHAR            1           scalar                    313,615,616,922                   
 GOTT2MPDS                  Local  141      CHAR            1           scalar                    311,586,587,906                   
 GOTT500PDS                 Local  140      CHAR            1           scalar                    308,562,563,882                   
 GOTT700PDS                 Local  140      CHAR            1           scalar                    309,550,551,890                   
 GOTT850PDS                 Local  140      CHAR            1           scalar                    310,538,539,898                   
 GOTTCDCPDS                 Local  145      CHAR            1           scalar                    329,660,661,1029                  
 GOTTD2MPDS                 Local  141      CHAR            1           scalar                    314,629,630,930                   
 GOTU10M                    Local  150      CHAR            1           scalar                    795,796                           

Page 22          Source Listing                  ECMWFENSH
2020-06-15 22:06 Symbol Table                    ecmwfensh.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GOTU200                    Local  146      CHAR            1           scalar                    775,776                           
 GOTU500                    Local  147      CHAR            1           scalar                    780,781                           
 GOTU700                    Local  148      CHAR            1           scalar                    785,786                           
 GOTU850                    Local  149      CHAR            1           scalar                    790,791                           
 GOTV10M                    Local  150      CHAR            1           scalar                    822,823                           
 GOTV200                    Local  146      CHAR            1           scalar                    802,803                           
 GOTV500                    Local  147      CHAR            1           scalar                    807,808                           
 GOTV700                    Local  148      CHAR            1           scalar                    812,813                           
 GOTV850                    Local  149      CHAR            1           scalar                    817,818                           
 GOTZ1000PDS                Local  143      CHAR            1           scalar                    320,675,676,971                   
 GOTZ200PDS                 Local  142      CHAR            1           scalar                    316,723,724,939                   
 GOTZ500PDS                 Local  142      CHAR            1           scalar                    317,711,712,947                   
 GOTZ700PDS                 Local  142      CHAR            1           scalar                    318,699,700,955                   
 GOTZ850PDS                 Local  142      CHAR            1           scalar                    319,687,688,963                   
 GRANGE                     Subr   464                                                            464,832                           
 GRIB_CLOSE                 Subr   852                                                            852,865,869                       
 GRIB_OPEN_WA               Subr   480                                                            480                               
 I                          Local  466      I(4)            4           scalar                    466,514,515,527,528,541,542,553,55
                                                                                                  4,565,566,577,578,589,590,604,605,
                                                                                                  618,619,632,633,646,647,663,664,67
                                                                                                  8,679,690,691,702,703,714,715,726,
                                                                                                  727,740,741,752,753,764,765,834   
 ICHK                       Local  408      I(4)            4           scalar                    408,409,412,415,416,419,422,423,42
                                                                                                  6,429,430,433,436,437,440,443,444,
                                                                                                  447                               
 IP                         Local  519      I(4)            4           scalar                    519,520,521,533,534,546,547,558,55
                                                                                                  9,570,571,582,583,594,595,609,610,
                                                                                                  623,624,637,638,651,655,668,669,67
                                                                                                  0,683,684,695,696,707,708,719,720,
                                                                                                  731,732,745,746,757,758,769,770   
 IRET                       Local  371      I(4)            4           scalar                    371,374,388,455,459,471           
 IRETO                      Local  480      I(4)            4           scalar                    480,481,482,852,853,854,865,866,86
                                                                                                  7,869,870,871                     
 J                          Local  370      I(4)            4           scalar                    370,387,453,456,471               
 JENS                       Local  152      I(4)            4     1     200                       362,387,423,426                   
 JF                         Param  137      I(4)            4           scalar                    189,190,387                       
 JGDS                       Local  152      I(4)            4     1     200                       361,387,416,419                   
 JPDS                       Local  152      I(4)            4     1     200                       360,363,387,409,412               
 K                          Local  388      I(4)            4           scalar                    388,453,457,466,834               
 KENS                       Local  153      I(4)            4     1     200                       378,388,444,447,485,850           
 KF                         Local  388      I(4)            4           scalar                    388,404,405,406,463,464,467,519,53
                                                                                                  1,533,546,558,570,582,594,609,623,
                                                                                                  637,651,668,683,695,707,719,731,74
                                                                                                  5,757,769,831,832,835,846,847,850 
 KFNUM                      Local  389      I(4)            4           scalar                    389,458,460,466,485,834           
 KGDS                       Local  153      I(4)            4     1     200                       364,388,399,400,401,402,403,437,44
                                                                                                  0,841,842,843,844,845,850,877,885,
                                                                                                  893,901,909,917,925,933,942,950,95
                                                                                                  8,966,974,983,991,999,1008,1016,10
                                                                                                  24,1032                           
 KHOLDMSLPPDS               Local  179      I(4)            4     1     200                       528,1008                          
 KHOLDPRCPPDS               Local  181      I(4)            4     1     200                       515,1024                          
 KHOLDPSFCPDS               Local  180      I(4)            4     1     200                       647,1016                          
 KHOLDRH500PDS              Local  176      I(4)            4     1     200                       765,983                           
 KHOLDRH700PDS              Local  177      I(4)            4     1     200                       753,991                           

Page 23          Source Listing                  ECMWFENSH
2020-06-15 22:06 Symbol Table                    ecmwfensh.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 KHOLDRH850PDS              Local  178      I(4)            4     1     200                       741,999                           
 KHOLDT200PDS               Local  163      I(4)            4     1     200                       578,877                           
 KHOLDT2MAXPDS              Local  168      I(4)            4     1     200                       605,917                           
 KHOLDT2MINPDS              Local  169      I(4)            4     1     200                       619,925                           
 KHOLDT2MPDS                Local  167      I(4)            4     1     200                       590,909                           
 KHOLDT500PDS               Local  164      I(4)            4     1     200                       566,885                           
 KHOLDT700PDS               Local  165      I(4)            4     1     200                       554,893                           
 KHOLDT850PDS               Local  166      I(4)            4     1     200                       542,901                           
 KHOLDTCDCPDS               Local  182      I(4)            4     1     200                       664,1032                          
 KHOLDTD2MPDS               Local  170      I(4)            4     1     200                       633,933                           
 KHOLDZ1000PDS              Local  175      I(4)            4     1     200                       679,974                           
 KHOLDZ200PDS               Local  171      I(4)            4     1     200                       727,942                           
 KHOLDZ500PDS               Local  172      I(4)            4     1     200                       715,950                           
 KHOLDZ700PDS               Local  173      I(4)            4     1     200                       703,958                           
 KHOLDZ850PDS               Local  174      I(4)            4     1     200                       691,966                           
 KMAXMEM                    Local  231      I(4)            4           scalar                    231,241,359                       
 KPDS                       Local  153      I(4)            4     1     200                       377,388,394,395,396,397,398,430,43
                                                                                                  3,457,458,461,466,476,506,510,515,
                                                                                                  523,528,536,537,542,549,554,561,56
                                                                                                  6,573,578,585,590,599,600,605,613,
                                                                                                  614,619,627,628,633,641,642,647,65
                                                                                                  8,659,664,673,674,679,686,691,698,
                                                                                                  703,710,715,722,727,735,736,741,74
                                                                                                  8,753,760,765,773,774,779,784,789,
                                                                                                  794,800,801,806,811,816,821,834,83
                                                                                                  6,837,838,839,840,850             
 KPDSNULL                   Local  376      I(4)            4           scalar                    376,377,378,430,444               
 KPDSREAD                   Local  367      I(4)            4           scalar                    367,376,391,412,419,426,433,440,44
                                                                                                  7,451                             
 KRES                       Local  231      I(4)            4           scalar                    231,240,485                       
 KTOT                       Local  389      I(4)            4           scalar                    389,467,835                       
 KTYPE                      Local  389      I(4)            4           scalar                    389,466,485,834                   
 LB                         Local  189      L(4)            4     1     131072                    388,406,463,464,531,831,832,850,87
                                                                                                  8,886,894,902,910,918,926,934,943,
                                                                                                  951,959,967,975,984,992,1000,1009,
                                                                                                  1017,1025,1033                    
 LUGB                       Param  137      I(4)            4           scalar                    387,865,867                       
 LUGI                       Param  137      I(4)            4           scalar                    387,869,871                       
 LUGOUT                     Local  476      I(4)            4           scalar                    476,480,482,850,852,854           
 MAXLOOP                    Local  359      I(4)            4           scalar                    359                               
 MEMBERCT                   Local  183      I(4)            4     1     2                         365,476                           
 MM                         Local  394      I(4)            4           scalar                    394,395,396,397,398,399,400,401,40
                                                                                                  2,403,836,837,838,839,840,841,842,
                                                                                                  843,844,845                       
 MSLPCT                     Local  188      I(4)            4           scalar                    350,532,534,1007                  
 MSLPMEAN                   Local  224      R(8)            8     1     65160                     295,1007,1009                     
 MSLPSPR                    Local  224      R(8)            8     1     65160                     296,1007,1009                     
 MSLPVALS                   Local  223      R(8)            8     2     3388320                   294,534,1007                      
 NAMIN                      Local  231                                  scalar                    235                               
 NEWVAR                     Local  151      CHAR            8           scalar                    508,513,526,540,552,564,576,588,60
                                                                                                  3,617,631,645,662,677,689,701,713,
                                                                                                  725,739,751,763,777,782,787,792,79
                                                                                                  7,804,809,814,819,824,829,830,858 
 NLAT                       Param  137      I(4)            4           scalar                    191,192,193,194,195,196,197,198,19
                                                                                                  9,200,201,202,203,204,205,206,207,

Page 24          Source Listing                  ECMWFENSH
2020-06-15 22:06 Symbol Table                    ecmwfensh.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  208,209,210,211,212,213,214,215,21
                                                                                                  6,217,218,219,220,221,222,223,224,
                                                                                                  225,226,227,228,229,230,875,877,88
                                                                                                  3,885,891,893,899,901,907,909,915,
                                                                                                  917,923,925,931,933,940,942,948,95
                                                                                                  0,956,958,964,966,972,974,981,983,
                                                                                                  989,991,997,999,1006,1008,1014,101
                                                                                                  6,1022,1024,1030,1032             
 NLON                       Param  137      I(4)            4           scalar                    191,192,193,194,195,196,197,198,19
                                                                                                  9,200,201,202,203,204,205,206,207,
                                                                                                  208,209,210,211,212,213,214,215,21
                                                                                                  6,217,218,219,220,221,222,223,224,
                                                                                                  225,226,227,228,229,230,875,877,88
                                                                                                  3,885,891,893,899,901,907,909,915,
                                                                                                  917,923,925,931,933,940,942,948,95
                                                                                                  0,956,958,964,966,972,974,981,983,
                                                                                                  989,991,997,999,1006,1008,1014,101
                                                                                                  6,1022,1024,1030,1032             
 NUMEC                      Param  138      I(4)            4           scalar                    191,193,195,197,199,201,203,205,20
                                                                                                  7,209,211,213,215,217,219,221,223,
                                                                                                  225,227,229,875,883,891,899,907,91
                                                                                                  5,923,931,940,948,956,964,972,981,
                                                                                                  989,997,1006,1014,1022,1030       
 OUTPUT                     Subr   850                                                            850                               
 OUTPUT_STATS               Subr   877                                                            877,885,893,901,909,917,925,933,94
                                                                                                  2,950,958,966,974,983,991,999,1008
                                                                                                  ,1016,1024,1032                   
 PRCPCT                     Local  188      I(4)            4           scalar                    352,518,521,1023                  
 PRCPMEAN                   Local  228      R(8)            8     1     65160                     301,1023,1025                     
 PRCPSPR                    Local  228      R(8)            8     1     65160                     302,1023,1025                     
 PRCPVALS                   Local  227      R(8)            8     2     3388320                   300,521,1023                      
 PSFCCT                     Local  188      I(4)            4           scalar                    351,650,655,1015                  
 PSFCMEAN                   Local  226      R(8)            8     1     65160                     298,1015,1017                     
 PSFCSPR                    Local  226      R(8)            8     1     65160                     299,1015,1017                     
 PSFCVALS                   Local  225      R(8)            8     2     3388320                   297,655,1015                      
 RH500CT                    Local  187      I(4)            4           scalar                    346,768,770,982                   
 RH500MEAN                  Local  218      R(8)            8     1     65160                     285,982,984                       
 RH500SPR                   Local  218      R(8)            8     1     65160                     286,982,984                       
 RH500VALS                  Local  217      R(8)            8     2     3388320                   284,770,982                       
 RH700CT                    Local  187      I(4)            4           scalar                    347,756,758,990                   
 RH700MEAN                  Local  220      R(8)            8     1     65160                     288,990,992                       
 RH700SPR                   Local  220      R(8)            8     1     65160                     289,990,992                       
 RH700VALS                  Local  219      R(8)            8     2     3388320                   287,758,990                       
 RH850CT                    Local  187      I(4)            4           scalar                    348,744,746,998                   
 RH850MEAN                  Local  222      R(8)            8     1     65160                     291,998,1000                      
 RH850SPR                   Local  222      R(8)            8     1     65160                     292,998,1000                      
 RH850VALS                  Local  221      R(8)            8     2     3388320                   290,746,998                       
 RJENS                      Local  155      R(8)            8     1     204                       426                               
 RJGDS                      Local  155      R(8)            8     1     204                       419                               
 RJPDS                      Local  155      R(8)            8     1     204                       412                               
 RKENS                      Local  159      R(8)            8     1     204                       447                               
 RKGDS                      Local  159      R(8)            8     1     204                       440                               
 RKPDS                      Local  159      R(8)            8     1     204                       433                               
 SRANGE                     Subr   406                                                            406,463,531,831                   
 T200CT                     Local  184      I(4)            4           scalar                    331,581,583,876                   

Page 25          Source Listing                  ECMWFENSH
2020-06-15 22:06 Symbol Table                    ecmwfensh.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 T200MEAN                   Local  192      R(8)            8     1     65160                     244,876,878                       
 T200SPR                    Local  192      R(8)            8     1     65160                     245,876,878                       
 T200VALS                   Local  191      R(8)            8     2     3388320                   243,583,876                       
 T2MAXCT                    Local  185      I(4)            4           scalar                    336,608,610,916                   
 T2MAXMEAN                  Local  202      R(8)            8     1     65160                     259,916,918                       
 T2MAXSPR                   Local  202      R(8)            8     1     65160                     260,916,918                       
 T2MAXVALS                  Local  201      R(8)            8     2     3388320                   258,610,916                       
 T2MCT                      Local  185      I(4)            4           scalar                    335,593,595,908                   
 T2MINCT                    Local  185      I(4)            4           scalar                    337,622,624,924                   
 T2MINMEAN                  Local  204      R(8)            8     1     65160                     262,924,926                       
 T2MINSPR                   Local  204      R(8)            8     1     65160                     263,924,926                       
 T2MINVALS                  Local  203      R(8)            8     2     3388320                   261,624,924                       
 T2MMEAN                    Local  200      R(8)            8     1     65160                     256,908,910                       
 T2MSPR                     Local  200      R(8)            8     1     65160                     257,908,910                       
 T2MVALS                    Local  199      R(8)            8     2     3388320                   255,595,908                       
 T500CT                     Local  184      I(4)            4           scalar                    332,569,571,884                   
 T500MEAN                   Local  194      R(8)            8     1     65160                     247,884,886                       
 T500SPR                    Local  194      R(8)            8     1     65160                     248,884,886                       
 T500VALS                   Local  193      R(8)            8     2     3388320                   246,571,884                       
 T700CT                     Local  184      I(4)            4           scalar                    333,557,559,892                   
 T700MEAN                   Local  196      R(8)            8     1     65160                     250,892,894                       
 T700SPR                    Local  196      R(8)            8     1     65160                     251,892,894                       
 T700VALS                   Local  195      R(8)            8     2     3388320                   249,559,892                       
 T850CT                     Local  184      I(4)            4           scalar                    334,545,547,900                   
 T850MEAN                   Local  198      R(8)            8     1     65160                     253,900,902                       
 T850SPR                    Local  198      R(8)            8     1     65160                     254,900,902                       
 T850VALS                   Local  197      R(8)            8     2     3388320                   252,547,900                       
 TCDCCT                     Local  188      I(4)            4           scalar                    353,667,670,1031                  
 TCDCMEAN                   Local  230      R(8)            8     1     65160                     304,1031,1033                     
 TCDCSPR                    Local  230      R(8)            8     1     65160                     305,1031,1033                     
 TCDCVALS                   Local  229      R(8)            8     2     3388320                   303,670,1031                      
 TD2MCT                     Local  185      I(4)            4           scalar                    338,636,638,932                   
 TD2MMEAN                   Local  206      R(8)            8     1     65160                     265,932,934                       
 TD2MSPR                    Local  206      R(8)            8     1     65160                     266,932,934                       
 TD2MVALS                   Local  205      R(8)            8     2     3388320                   264,638,932                       
 W3TAGB                     Subr   233                                                            233                               
 W3TAGE                     Subr   1052                                                           1052                              
 Z1000CT                    Local  186      I(4)            4           scalar                    344,682,684,973                   
 Z1000MEAN                  Local  216      R(8)            8     1     65160                     281,973,975                       
 Z1000SPR                   Local  216      R(8)            8     1     65160                     282,973,975                       
 Z1000VALS                  Local  215      R(8)            8     2     3388320                   280,684,973                       
 Z200CT                     Local  186      I(4)            4           scalar                    340,730,732,941                   
 Z200MEAN                   Local  208      R(8)            8     1     65160                     269,941,943                       
 Z200SPR                    Local  208      R(8)            8     1     65160                     270,941,943                       
 Z200VALS                   Local  207      R(8)            8     2     3388320                   268,732,941                       
 Z500CT                     Local  186      I(4)            4           scalar                    341,718,720,949                   
 Z500MEAN                   Local  210      R(8)            8     1     65160                     272,949,951                       
 Z500SPR                    Local  210      R(8)            8     1     65160                     273,949,951                       
 Z500VALS                   Local  209      R(8)            8     2     3388320                   271,720,949                       
 Z700CT                     Local  186      I(4)            4           scalar                    342,706,708,957                   
 Z700MEAN                   Local  212      R(8)            8     1     65160                     275,957,959                       
 Z700SPR                    Local  212      R(8)            8     1     65160                     276,957,959                       
 Z700VALS                   Local  211      R(8)            8     2     3388320                   274,708,957                       
 Z850CT                     Local  186      I(4)            4           scalar                    343,694,696,965                   
 Z850MEAN                   Local  214      R(8)            8     1     65160                     278,965,967                       

Page 26          Source Listing                  ECMWFENSH
2020-06-15 22:06 Symbol Table                    ecmwfensh.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 Z850SPR                    Local  214      R(8)            8     1     65160                     279,965,967                       
 Z850VALS                   Local  213      R(8)            8     2     3388320                   277,696,965                       

Page 27          Source Listing                  ECMWFENSH
2020-06-15 22:06                                 ecmwfensh.f

   1055 c
   1056 c----------------------------------------------------------------------c
   1057 c----------------------------------------------------------------------c
   1058 c
   1059       subroutine create_stats (numec,nlat,nlon,nct,vals,vmean,vspr)
   1060 c$$$  SUBPROGRAM DOCUMENTATION BLOCK
   1061 C                .      .    .                                       .
   1062 C SUBPROGRAM:    create_stats
   1063 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2004-01-26
   1064 C
   1065 C ABSTRACT: START ABSTRACT HERE AND INDENT TO COLUMN 5 ON THE
   1066 C   FOLLOWING LINES.  PLEASE PROVIDE A BRIEF DESCRIPTION OF
   1067 C   WHAT THE SUBPROGRAM DOES.
   1068 C
   1069 C PROGRAM HISTORY LOG:
   1070 C   97-01-17  MARCHOK     original program
   1071 C   01-01-16  WOBUS       added DOCBLOCK
   1072 C   04-01-26  WOBUS       rearranged to process one variable
   1073 C
   1074 C USAGE:    CALL PROGRAM-NAME(INARG1, INARG2, WRKARG, OUTARG1, ... )
   1075 C   INPUT ARGUMENT LIST:
   1076 C     INARG1   - GENERIC DESCRIPTION, INCLUDING CONTENT, UNITS,
   1077 C     INARG2   - TYPE.  EXPLAIN FUNCTION IF CONTROL VARIABLE.
   1078 C
   1079 C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
   1080 C     WRKARG   - GENERIC DESCRIPTION, ETC., AS ABOVE.
   1081 C     OUTARG1  - EXPLAIN COMPLETELY IF ERROR RETURN
   1082 C     ERRFLAG  - EVEN IF MANY LINES ARE NEEDED
   1083 C
   1084 C   INPUT FILES:   (DELETE IF NO INPUT FILES IN SUBPROGRAM)
   1085 C
   1086 C   OUTPUT FILES:  (DELETE IF NO OUTPUT FILES IN SUBPROGRAM)
   1087 C
   1088 C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
   1089 C
   1090 C ATTRIBUTES:
   1091 C   LANGUAGE: INDICATE EXTENSIONS, COMPILER OPTIONS
   1092 C   MACHINE:  IBM SP
   1093 C
   1094 C$$$
   1095 c
   1096       real      vals(numec,nlat*nlon)
   1097       real      vmean(nlat*nlon)
   1098       real      vspr(nlat*nlon)
   1099       integer   nct
   1100 c
   1101       npts = nlon * nlat
   1102       vmean = 0.0
   1103 
   1104 c     -----------------------------------------------------
   1105 c        MEAN & SPREAD
   1106 c     -----------------------------------------------------
   1107  
   1108       if (nct .gt. 0) then
   1109 
   1110 c       sum up all values from all members at all points
   1111 

Page 28          Source Listing                  CREATE_STATS
2020-06-15 22:06                                 ecmwfensh.f

   1112         do imem = 1,nct
   1113           do n = 1,npts
   1114             vmean(n) = vmean(n) + vals(imem,n)
   1115           enddo
   1116         enddo
   1117 
   1118 c       calculate mean
   1119 
   1120         do n = 1,npts
   1121           vmean(n) = vmean(n) / float(nct)
   1122         enddo
   1123 
   1124 c       calculate standard deviation
   1125 
   1126         if (nct .gt. 1) then
   1127 
   1128 	  do n = 1,npts
   1129 	    varnce = 0.0
   1130 	    do imem = 1,nct
   1131 	      xdiff    = vals(imem,n) - vmean(n)
   1132 	      xdiffsqr = xdiff * xdiff
   1133 	      varnce   = varnce + xdiffsqr
   1134 	    enddo
   1135 	    vspr(n) = sqrt(varnce/float(nct))
   1136 	  enddo
   1137 	  print *,' in create_stats imem=',imem,'   nct=',nct
   1138 
   1139         else
   1140 
   1141 	  do n = 1,npts
   1142 	    vspr(n)  = 0.00
   1143 	  enddo
   1144 
   1145 	endif
   1146 
   1147       else
   1148 
   1149         do n = 1,npts
   1150           vmean(n) = -99.0
   1151 	  vspr(n)  = -99.0
   1152         enddo
   1153 
   1154       endif
   1155           
   1156       return
   1157       end

Page 29          Source Listing                  CREATE_STATS
2020-06-15 22:06 Entry Points                    ecmwfensh.f



ENTRY POINTS

  Name                     
                           
 create_stats_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CREATE_STATS               Subr   1059                                                                                             
 FLOAT                      Func   1121                                 scalar                    1121,1135                         
 IMEM                       Local  1112     I(4)            4           scalar                    1112,1114,1130,1131,1137          
 N                          Local  1113     I(4)            4           scalar                    1113,1114,1120,1121,1128,1131,1135
                                                                                                  ,1141,1142,1149,1150,1151         
 NCT                        Dummy  1059     I(4)            4           scalar   ARG,INOUT        1108,1112,1121,1126,1130,1135,1137
 NLAT                       Dummy  1059     I(4)            4           scalar   ARG,INOUT        1096,1097,1098,1101               
 NLON                       Dummy  1059     I(4)            4           scalar   ARG,INOUT        1096,1097,1098,1101               
 NPTS                       Local  1101     I(4)            4           scalar                    1101,1113,1120,1128,1141,1149     
 NUMEC                      Dummy  1059     I(4)            4           scalar   ARG,INOUT        1096                              
 SQRT                       Func   1135                                 scalar                    1135                              
 VALS                       Dummy  1059     R(8)            8     2     0        ARG,INOUT        1114,1131                         
 VARNCE                     Local  1129     R(8)            8           scalar                    1129,1133,1135                    
 VMEAN                      Dummy  1059     R(8)            8     1     0        ARG,INOUT        1102,1114,1121,1131,1150          
 VSPR                       Dummy  1059     R(8)            8     1     0        ARG,INOUT        1135,1142,1151                    
 XDIFF                      Local  1131     R(8)            8           scalar                    1131,1132                         
 XDIFFSQR                   Local  1132     R(8)            8           scalar                    1132,1133                         

Page 30          Source Listing                  CREATE_STATS
2020-06-15 22:06                                 ecmwfensh.f

   1158 c
   1159 c----------------------------------------------------------------------c
   1160 c----------------------------------------------------------------------c
   1161 c
   1162       subroutine adjpds (kpds,contflag,lugout,memberct)
   1163 c$$$  SUBPROGRAM DOCUMENTATION BLOCK
   1164 C                .      .    .                                       .
   1165 C SUBPROGRAM:    adjpds
   1166 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   1167 C
   1168 C ABSTRACT: START ABSTRACT HERE AND INDENT TO COLUMN 5 ON THE
   1169 C   FOLLOWING LINES.  PLEASE PROVIDE A BRIEF DESCRIPTION OF
   1170 C   WHAT THE SUBPROGRAM DOES.
   1171 C
   1172 C PROGRAM HISTORY LOG:
   1173 C   97-01-17  MARCHOK     original program
   1174 C   01-01-16  WOBUS       added DOCBLOCK
   1175 C
   1176 C USAGE:    CALL PROGRAM-NAME(INARG1, INARG2, WRKARG, OUTARG1, ... )
   1177 C   INPUT ARGUMENT LIST:
   1178 C     INARG1   - GENERIC DESCRIPTION, INCLUDING CONTENT, UNITS,
   1179 C     INARG2   - TYPE.  EXPLAIN FUNCTION IF CONTROL VARIABLE.
   1180 C
   1181 C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
   1182 C     WRKARG   - GENERIC DESCRIPTION, ETC., AS ABOVE.
   1183 C     OUTARG1  - EXPLAIN COMPLETELY IF ERROR RETURN
   1184 C     ERRFLAG  - EVEN IF MANY LINES ARE NEEDED
   1185 C
   1186 C   INPUT FILES:   (DELETE IF NO INPUT FILES IN SUBPROGRAM)
   1187 C
   1188 C   OUTPUT FILES:  (DELETE IF NO OUTPUT FILES IN SUBPROGRAM)
   1189 C
   1190 C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
   1191 C
   1192 C ATTRIBUTES:
   1193 C   LANGUAGE: INDICATE EXTENSIONS, COMPILER OPTIONS
   1194 C   MACHINE:  IBM SP
   1195 C
   1196 C$$$
   1197 c
   1198 c     ****************************************************
   1199 c     ADJUST GRIB PARAMETER FROM THE ECMWF TABLE VALUES
   1200 c     TO NCEP TABLE VALUES AS FOLLOWS:
   1201 c
   1202 c       Parameter        ECMWF Grib Parm    NCEP Grib Parm
   1203 c     -------------      ---------------    --------------
   1204 c     u-comp (std lev)        131                33
   1205 c     v-comp (std lev)        132                34
   1206 c     gp height               156                 7
   1207 c     relative humidity       157                52
   1208 c     temperature             130                11
   1209 c     mslp                    151                 2
   1210 c     total precip            228                61
   1211 c
   1212 c     - new batch 1/04
   1213 c     2 meter temp            167 1 0            11 105 2
   1214 c     2 meter tmax            201 1 0            15 105 2

Page 31          Source Listing                  ADJPDS
2020-06-15 22:06                                 ecmwfensh.f

   1215 c     2 meter tmin            202 1 0            16 105 2
   1216 c     2 meter td              168 1 0            17 105 2
   1217 cJ.Peng---2011-05-17------------NCO change Surface Pressure----
   1218 c     psfc                    152 109 1 (log)     1 1 0
   1219 c     psfc                    134   1 0 new       1 1 0
   1220 
   1221 c     total cloud cover       164 1 0 (0-1)      71 200 0 (%)
   1222 c
   1223 c
   1224 c     - Others, which currently (1/97) are in the ECMWF
   1225 c       data sets, but are not needed for this output data
   1226 c       set (they're needed by the Ocean Modeling Branch
   1227 c       and are processed in a different program):
   1228 c       (now processed here 1/04)
   1229 c
   1230 c     u-comp (10m)            165 1 0            33 105 10
   1231 c     v-comp (10m)            166 1 0            34 105 10
   1232 c
   1233 c     -------------------------------------------------
   1234 c
   1235 c     ALSO, get the  output GRIB file number, which is 
   1236 c     based on the parameter number and vertical level.
   1237 c
   1238 c     contflag is needed because ECMWF sends a couple of 
   1239 c     additional records in their package which our Ocean
   1240 c     Modeling Branch uses, but which we do not archive,
   1241 c     so we don't want to output these to our GRIB files.
   1242 c
   1243 c     ****************************************************
   1244 c
   1245       character*1 contflag
   1246       integer     kpds(25),memberct(2)
   1247 c
   1248       contflag='n'
   1249       lugout=0
   1250 
   1251 cJ.Peng---2011-05-17------------NCO change Surface Pressure----
   1252 c  152----to ----134
   1253       if (kpds(5).ne.130 .and.
   1254      &    kpds(5).ne.131 .and. kpds(5).ne.132 .and.
   1255      &    kpds(5).ne.151 .and. kpds(5).ne.134 .and.
   1256      &    kpds(5).ne.156 .and. kpds(5).ne.157 .and.
   1257      &    kpds(5).ne.164 .and.
   1258      &    kpds(5).ne.165 .and. kpds(5).ne.166 .and.
   1259      &    kpds(5).ne.167 .and. kpds(5).ne.168 .and.
   1260      &    kpds(5).ne.201 .and. kpds(5).ne.202 .and.
   1261      &    kpds(5).ne.228) then
   1262         goto 900
   1263       endif
   1264 
   1265 c
   1266       if (kpds(5).eq.130) then
   1267         kpds(5) = 11
   1268         if (kpds(7).eq.200) lugout = 51
   1269         if (kpds(7).eq.500) lugout = 52
   1270         if (kpds(7).eq.700) lugout = 53
   1271         if (kpds(7).eq.850) lugout = 54

Page 32          Source Listing                  ADJPDS
2020-06-15 22:06                                 ecmwfensh.f

   1272       else if (kpds(5).eq.131) then
   1273         kpds(5) = 33
   1274         if (kpds(7).eq.200) lugout = 101
   1275         if (kpds(7).eq.500) lugout = 103
   1276         if (kpds(7).eq.700) lugout = 105
   1277         if (kpds(7).eq.850) lugout = 107
   1278       else if (kpds(5).eq.132) then
   1279         kpds(5) = 34
   1280         if (kpds(7).eq.200) lugout = 102
   1281         if (kpds(7).eq.500) lugout = 104
   1282         if (kpds(7).eq.700) lugout = 106
   1283         if (kpds(7).eq.850) lugout = 108
   1284       else if (kpds(5).eq.151) then
   1285         lugout  = 81
   1286         kpds(5) = 2
   1287 c       kpds(6) = 100
   1288 
   1289 cJ.Peng---2011-05-17------------NCO change Surface Pressure----
   1290 c      else if (kpds(5).eq.152) then
   1291       else if (kpds(5).eq.134) then
   1292 
   1293         kpds(5) = 1
   1294 c        if (kpds(7).eq.1) then
   1295         if (kpds(7).eq.0) then
   1296 
   1297 	  lugout = 82
   1298 	  kpds(6) = 1
   1299 	  kpds(7) = 0
   1300 	end if
   1301       else if (kpds(5).eq.156) then
   1302         kpds(5) = 7
   1303         if (kpds(7).eq.1000) lugout = 65
   1304         if (kpds(7).eq.850) lugout = 64
   1305         if (kpds(7).eq.700) lugout = 63
   1306         if (kpds(7).eq.500) lugout = 62
   1307         if (kpds(7).eq.200) lugout = 61
   1308       else if (kpds(5).eq.157) then
   1309         kpds(5) = 52
   1310         if (kpds(7).eq.500) lugout  = 71
   1311         if (kpds(7).eq.700) lugout  = 72
   1312         if (kpds(7).eq.850) lugout  = 73
   1313       else if (kpds(5).eq.164) then
   1314         kpds(5) = 71
   1315         if (kpds(7).eq.0) then
   1316 	  lugout = 84
   1317 	  kpds(6) = 200
   1318 	  kpds(7) = 0
   1319 	end if
   1320       else if (kpds(5).eq.165) then
   1321         kpds(5) = 33
   1322         if (kpds(7).eq.0) then
   1323 	  lugout = 109
   1324 	  kpds(6) = 105
   1325 	  kpds(7) = 10
   1326 	end if
   1327       else if (kpds(5).eq.166) then
   1328         kpds(5) = 34

Page 33          Source Listing                  ADJPDS
2020-06-15 22:06                                 ecmwfensh.f

   1329         if (kpds(7).eq.0) then
   1330 	  lugout = 110
   1331 	  kpds(6) = 105
   1332 	  kpds(7) = 10
   1333 	end if
   1334       else if (kpds(5).eq.167) then
   1335         kpds(5) = 11
   1336         if (kpds(7).eq.0) then
   1337 	  lugout = 55
   1338 	  kpds(6) = 105
   1339 	  kpds(7) = 2
   1340 	end if
   1341       else if (kpds(5).eq.168) then
   1342         kpds(5) = 17
   1343         if (kpds(7).eq.0) then
   1344 	  lugout = 58
   1345 	  kpds(6) = 105
   1346 	  kpds(7) = 2
   1347 	end if
   1348       else if (kpds(5).eq.201) then
   1349         kpds(5) = 15
   1350         if (kpds(7).eq.0) then
   1351 	  lugout = 56
   1352 	  kpds(6) = 105
   1353 	  kpds(7) = 2
   1354 	end if
   1355       else if (kpds(5).eq.202) then
   1356         kpds(5) = 16
   1357         if (kpds(7).eq.0) then
   1358 	  lugout = 57
   1359 	  kpds(6) = 105
   1360 	  kpds(7) = 2
   1361 	end if
   1362 
   1363 c     Now make adjustments for the precip GRIB PDS parms,
   1364 c     which ECMWF did not code correctly for accumulations.
   1365 
   1366       else if (kpds(5).eq.228) then
   1367         kpds(5) = 61
   1368         lugout  = 83
   1369         kpds(13) = 1
   1370         if (kpds(14).eq.0) then
   1371           kpds(14) = 0
   1372           kpds(15) = 0
   1373         else
   1374           kpds(14) = kpds(14) - 12
   1375           kpds(15) = kpds(14) + 12
   1376         endif
   1377         kpds(16) = 4
   1378         kpds(22) = 1
   1379       endif
   1380 c
   1381       kpds(19) = 2
   1382 c
   1383       if (lugout .ne. 0) then
   1384 	contflag='y'
   1385       endif

Page 34          Source Listing                  ADJPDS
2020-06-15 22:06                                 ecmwfensh.f

   1386 c
   1387  900  continue
   1388       return
   1389       end


ENTRY POINTS

  Name               
                     
 adjpds_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 900                        Label  1387                                                           1262                              
 ADJPDS                     Subr   1162                                                                                             
 CONTFLAG                   Dummy  1162     CHAR            1           scalar   ARG,INOUT        1248,1384                         
 KPDS                       Dummy  1162     I(4)            4     1     25       ARG,INOUT        1253,1254,1255,1256,1257,1258,1259
                                                                                                  ,1260,1261,1266,1267,1268,1269,127
                                                                                                  0,1271,1272,1273,1274,1275,1276,12
                                                                                                  77,1278,1279,1280,1281,1282,1283,1
                                                                                                  284,1286,1291,1293,1295,1298,1299,
                                                                                                  1301,1302,1303,1304,1305,1306,1307
                                                                                                  ,1308,1309,1310,1311,1312,1313,131
                                                                                                  4,1315,1317,1318,1320,1321,1322,13
                                                                                                  24,1325,1327,1328,1329,1331,1332,1
                                                                                                  334,1335,1336,1338,1339,1341,1342,
                                                                                                  1343,1345,1346,1348,1349,1350,1352
                                                                                                  ,1353,1355,1356,1357,1359,1360,136
                                                                                                  6,1367,1369,1370,1371,1372,1374,13
                                                                                                  75,1377,1378,1381                 
 LUGOUT                     Dummy  1162     I(4)            4           scalar   ARG,INOUT        1249,1268,1269,1270,1271,1274,1275
                                                                                                  ,1276,1277,1280,1281,1282,1283,128
                                                                                                  5,1297,1303,1304,1305,1306,1307,13
                                                                                                  10,1311,1312,1316,1323,1330,1337,1
                                                                                                  344,1351,1358,1368,1383           
 MEMBERCT                   Dummy  1162     I(4)            4     1     2        ARG,INOUT                                          

Page 35          Source Listing                  ADJPDS
2020-06-15 22:06                                 ecmwfensh.f

   1390 c
   1391 c----------------------------------------------------------------------c
   1392 c----------------------------------------------------------------------c
   1393 c
   1394       subroutine adjext (kens,ktype,kfnum,kres)
   1395 c$$$  SUBPROGRAM DOCUMENTATION BLOCK
   1396 C                .      .    .                                       .
   1397 C SUBPROGRAM:    adjext
   1398 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   1399 C
   1400 C ABSTRACT: START ABSTRACT HERE AND INDENT TO COLUMN 5 ON THE
   1401 C   FOLLOWING LINES.  PLEASE PROVIDE A BRIEF DESCRIPTION OF
   1402 C   WHAT THE SUBPROGRAM DOES.
   1403 C
   1404 C PROGRAM HISTORY LOG:
   1405 C   97-01-17  MARCHOK     original program
   1406 C   01-01-16  WOBUS       added DOCBLOCK
   1407 C
   1408 C USAGE:    CALL PROGRAM-NAME(INARG1, INARG2, WRKARG, OUTARG1, ... )
   1409 C   INPUT ARGUMENT LIST:
   1410 C     INARG1   - GENERIC DESCRIPTION, INCLUDING CONTENT, UNITS,
   1411 C     INARG2   - TYPE.  EXPLAIN FUNCTION IF CONTROL VARIABLE.
   1412 C
   1413 C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
   1414 C     WRKARG   - GENERIC DESCRIPTION, ETC., AS ABOVE.
   1415 C     OUTARG1  - EXPLAIN COMPLETELY IF ERROR RETURN
   1416 C     ERRFLAG  - EVEN IF MANY LINES ARE NEEDED
   1417 C
   1418 C   INPUT FILES:   (DELETE IF NO INPUT FILES IN SUBPROGRAM)
   1419 C
   1420 C   OUTPUT FILES:  (DELETE IF NO OUTPUT FILES IN SUBPROGRAM)
   1421 C
   1422 C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
   1423 C
   1424 C ATTRIBUTES:
   1425 C   LANGUAGE: INDICATE EXTENSIONS, COMPILER OPTIONS
   1426 C   MACHINE:  IBM SP
   1427 C
   1428 C$$$
   1429 c
   1430 c     This subroutine takes the ECMWF ensemble PDS header
   1431 c     extension parameters and creates the corresponding 
   1432 c     NCEP header extension.
   1433 c
   1434 c     INPUT
   1435 c     -----
   1436 c     ktype       ECMWF flag; 10 = Control, 11 = Perturbed Fcst
   1437 c     kfnum       0 = CONTROL FORECAST, 1-nn = Perturbed Fcst, 
   1438 c                  odd number is positive pert,
   1439 C                  even number is for negative pert.
   1440 c     kres        1 - input file contains only high res control
   1441 c                 2 - input file contains low res control and
   1442 c                     perturbations 
   1443 c                 (Important to know since high res control 
   1444 c                  does NOT have a PDS extension)
   1445 c
   1446 c     OUTPUT

Page 36          Source Listing                  ADJEXT
2020-06-15 22:06                                 ecmwfensh.f

   1447 c     ------
   1448 c     kens        NCEP ensemble PDS extension (Bytes 41-45)
   1449 c
   1450 c
   1451 c
   1452       integer   kens(5)
   1453 c
   1454       kens=0
   1455       kens(1)=1
   1456 c
   1457       if (kres.eq.1) then
   1458  
   1459 c       If kres=1 (this is information that is passed into this program
   1460 c       via a namelist), then you know that you are reading a file that
   1461 c       contains only HRC records, so give the current record an 
   1462 c       NCEP ensemble extension to indicate such.
   1463  
   1464         kens(2) = 1
   1465         kens(3) = 1
   1466 
   1467       else
   1468 
   1469 c       If kres=2 and the ktype=10, then you know that you're reading
   1470 c       a LRC record from one of the "USE" files.  As such, give it an
   1471 c       NCEP LRC designation.  If ktype=11, then you're reading one of
   1472 c       the perturbation records.
   1473 
   1474         if (ktype.eq.10) then
   1475           kens(2) = 1
   1476           kens(3) = 2
   1477         else
   1478           if (mod(kfnum,2).gt.0) then
   1479             kens(2) = 3
   1480           else
   1481             kens(2) = 2
   1482           end if
   1483         end if
   1484 
   1485       end if
   1486 c
   1487 c     CONSECUTIVELY NUMBERED ECMWF FORECASTS MAKE UP A NEGATIVELY
   1488 c     AND POSITIVELY PERTURBED PAIR.  THIS NEXT BIT OF CODE
   1489 c     ASSOCIATES AN ID NUMBER TO A MEMBER FROM EACH PAIR.
   1490 c
   1491       if (kres.eq.2 .and. ktype.eq.11) then
   1492         kens(3) = (kfnum + 1) / 2
   1493       endif
   1494 c
   1495 c     SET NMCEXT ARRAY MEMBERS 4 AND 5 EQUAL TO 1 AND 255.
   1496 c
   1497  400  continue
   1498 c
   1499       kens(4) = 1
   1500       kens(5) = 255
   1501 c
   1502       return 
   1503       end    

Page 37          Source Listing                  ADJEXT
2020-06-15 22:06 Entry Points                    ecmwfensh.f



ENTRY POINTS

  Name               
                     
 adjext_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 400                        Label  1497                                                                                             
 ADJEXT                     Subr   1394                                                                                             
 KENS                       Dummy  1394     I(4)            4     1     5        ARG,INOUT        1454,1455,1464,1465,1475,1476,1479
                                                                                                  ,1481,1492,1499,1500              
 KFNUM                      Dummy  1394     I(4)            4           scalar   ARG,INOUT        1478,1492                         
 KRES                       Dummy  1394     I(4)            4           scalar   ARG,INOUT        1457,1491                         
 KTYPE                      Dummy  1394     I(4)            4           scalar   ARG,INOUT        1474,1491                         
 MOD                        Func   1478                                 scalar                    1478                              

Page 38          Source Listing                  ADJEXT
2020-06-15 22:06                                 ecmwfensh.f

   1504 c
   1505 c----------------------------------------------------------------------c
   1506 c----------------------------------------------------------------------c
   1507 c
   1508       subroutine output (lugout,kf,kpds,kgds,ld,data,kens)
   1509 c$$$  SUBPROGRAM DOCUMENTATION BLOCK
   1510 C                .      .    .                                       .
   1511 C SUBPROGRAM:    output
   1512 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   1513 C
   1514 C ABSTRACT: START ABSTRACT HERE AND INDENT TO COLUMN 5 ON THE
   1515 C   FOLLOWING LINES.  PLEASE PROVIDE A BRIEF DESCRIPTION OF
   1516 C   WHAT THE SUBPROGRAM DOES.
   1517 C
   1518 C PROGRAM HISTORY LOG:
   1519 C   97-01-17  MARCHOK     original program
   1520 C   01-01-16  WOBUS       added DOCBLOCK
   1521 C
   1522 C USAGE:    CALL PROGRAM-NAME(INARG1, INARG2, WRKARG, OUTARG1, ... )
   1523 C   INPUT ARGUMENT LIST:
   1524 C     INARG1   - GENERIC DESCRIPTION, INCLUDING CONTENT, UNITS,
   1525 C     INARG2   - TYPE.  EXPLAIN FUNCTION IF CONTROL VARIABLE.
   1526 C
   1527 C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
   1528 C     WRKARG   - GENERIC DESCRIPTION, ETC., AS ABOVE.
   1529 C     OUTARG1  - EXPLAIN COMPLETELY IF ERROR RETURN
   1530 C     ERRFLAG  - EVEN IF MANY LINES ARE NEEDED
   1531 C
   1532 C   INPUT FILES:   (DELETE IF NO INPUT FILES IN SUBPROGRAM)
   1533 C
   1534 C   OUTPUT FILES:  (DELETE IF NO OUTPUT FILES IN SUBPROGRAM)
   1535 C
   1536 C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
   1537 C
   1538 C ATTRIBUTES:
   1539 C   LANGUAGE: INDICATE EXTENSIONS, COMPILER OPTIONS
   1540 C   MACHINE:  IBM SP
   1541 C
   1542 C$$$
   1543 c
   1544       integer   kpds(200),kgds(200),kens(200)
   1545       logical   ld(kf)
   1546       real      data(kf)
   1547 c
   1548 c     ****************************
   1549 c      WRITE GRIB FILE
   1550 c     ****************************
   1551 c
   1552       if ((kens(3).le.1).or.(kens(3).ge.25)) then
   1553 	if ((kpds(14).le.24).or.(kpds(14).ge.228)) then
   1554 	  print *,'at beginning of output, lugout=',lugout
   1555      &           ,' kpds(5)=',kpds(5)
   1556      &           ,' kens(2)=',kens(2),' kens(3)=',kens(3),' kf=',kf
   1557 c         print *,' '
   1558 	endif
   1559       endif
   1560       call putgbe (lugout,kf,kpds,kgds,kens,ld,data,iret)

Page 39          Source Listing                  OUTPUT
2020-06-15 22:06                                 ecmwfensh.f

   1561  
   1562       if (iret.eq.0) then
   1563 c       print *,' '
   1564 	if ((kens(3).le.1).or.(kens(3).ge.25)) then
   1565 	  if ((kpds(14).le.24).or.(kpds(14).ge.228)) then
   1566 	    print *,'IRET = 0 after call to putgbe'
   1567 c	    print *,' '
   1568 	  endif
   1569 	endif
   1570       else
   1571         print *,' '
   1572         print *,'!!! ERROR: IRET NE 0 AFTER CALL TO PUTGBE !!!'
   1573      &         ,lugout,'=lugout ',iret,'=iret '
   1574         print *,' '
   1575       endif
   1576 c
   1577       return 
   1578       end


ENTRY POINTS

  Name               
                     
 output_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1508     R(8)            8     1     0        ARG,INOUT        1560                              
 IRET                       Local  1560     I(4)            4           scalar                    1560,1562,1573                    
 KENS                       Dummy  1508     I(4)            4     1     200      ARG,INOUT        1552,1556,1560,1564               
 KF                         Dummy  1508     I(4)            4           scalar   ARG,INOUT        1545,1546,1556,1560               
 KGDS                       Dummy  1508     I(4)            4     1     200      ARG,INOUT        1560                              
 KPDS                       Dummy  1508     I(4)            4     1     200      ARG,INOUT        1553,1555,1560,1565               
 LD                         Dummy  1508     L(4)            4     1     0        ARG,INOUT        1560                              
 LUGOUT                     Dummy  1508     I(4)            4           scalar   ARG,INOUT        1554,1560,1573                    
 OUTPUT                     Subr   1508                                                                                             
 PUTGBE                     Subr   1560                                                           1560                              

Page 40          Source Listing                  OUTPUT
2020-06-15 22:06                                 ecmwfensh.f

   1579 c
   1580 c----------------------------------------------------------------------c
   1581 c----------------------------------------------------------------------c
   1582 c
   1583 c     subroutine output_stats (cparm,ctype,kf,kpds,kgds,ld,data)
   1584       subroutine output_stats (cparm,lugout,kf,kpds,kgds,ld,datam
   1585      &,datas)
   1586 c$$$  SUBPROGRAM DOCUMENTATION BLOCK
   1587 C                .      .    .                                       .
   1588 C SUBPROGRAM:    output_stats
   1589 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   1590 C
   1591 C ABSTRACT: START ABSTRACT HERE AND INDENT TO COLUMN 5 ON THE
   1592 C   FOLLOWING LINES.  PLEASE PROVIDE A BRIEF DESCRIPTION OF
   1593 C   WHAT THE SUBPROGRAM DOES.
   1594 C
   1595 C PROGRAM HISTORY LOG:
   1596 C   97-01-17  MARCHOK     original program
   1597 C   01-01-16  WOBUS       added DOCBLOCK
   1598 C
   1599 C USAGE:    CALL PROGRAM-NAME(INARG1, INARG2, WRKARG, OUTARG1, ... )
   1600 C   INPUT ARGUMENT LIST:
   1601 C     INARG1   - GENERIC DESCRIPTION, INCLUDING CONTENT, UNITS,
   1602 C     INARG2   - TYPE.  EXPLAIN FUNCTION IF CONTROL VARIABLE.
   1603 C
   1604 C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
   1605 C     WRKARG   - GENERIC DESCRIPTION, ETC., AS ABOVE.
   1606 C     OUTARG1  - EXPLAIN COMPLETELY IF ERROR RETURN
   1607 C     ERRFLAG  - EVEN IF MANY LINES ARE NEEDED
   1608 C
   1609 C   INPUT FILES:   (DELETE IF NO INPUT FILES IN SUBPROGRAM)
   1610 C
   1611 C   OUTPUT FILES:  (DELETE IF NO OUTPUT FILES IN SUBPROGRAM)
   1612 C
   1613 C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
   1614 C
   1615 C ATTRIBUTES:
   1616 C   LANGUAGE: INDICATE EXTENSIONS, COMPILER OPTIONS
   1617 C   MACHINE:  IBM SP
   1618 C
   1619 C$$$
   1620 c
   1621       integer   kpds(200),kgds(200),kens(200)
   1622       logical   ld(kf)
   1623       real      datam(kf)
   1624       real      datas(kf)
   1625       character cparm*4,ctype*4
   1626 
   1627       call grib_open_wa (lugout,ireto)
   1628       if (ireto.gt.0) then
   1629         print *,'ireto,lu from grib_open_wa in output_stats = ',
   1630      ,     ireto,lugout
   1631       endif
   1632 
   1633       do istat=1,2
   1634 
   1635 	 if (istat .eq. 1) ctype='mean'

Page 41          Source Listing                  OUTPUT_STATS
2020-06-15 22:06                                 ecmwfensh.f

   1636 	 if (istat .eq. 2) ctype='spr '
   1637 
   1638 	ld = .TRUE.
   1639 
   1640         iready=1
   1641 	if (cparm .eq. 't200') then
   1642 	  kpds(5)  = 11
   1643 	  kpds(6)  = 100
   1644 	  kpds(7)  = 200
   1645 	  kpds(22) = 1
   1646 	else if (cparm .eq. 't500') then
   1647 	  kpds(5)  = 11
   1648 	  kpds(6)  = 100
   1649 	  kpds(7)  = 500
   1650 	  kpds(22) = 1
   1651 	else if (cparm .eq. 't700') then
   1652 	  kpds(5)  = 11
   1653 	  kpds(6)  = 100
   1654 	  kpds(7)  = 500
   1655 	  kpds(22) = 1
   1656 	else if (cparm .eq. 't850') then
   1657 	  kpds(5)  = 11
   1658 	  kpds(6)  = 100
   1659 	  kpds(7)  = 850
   1660 	  kpds(22) = 1
   1661 	else if (cparm .eq. 't2m') then
   1662 	  kpds(5)  = 11
   1663 	  kpds(6)  = 105
   1664 	  kpds(7)  = 2
   1665 	  kpds(22) = 1
   1666 	else if (cparm .eq. 't2mx') then
   1667 	  kpds(5)  = 15
   1668 	  kpds(6)  = 105
   1669 	  kpds(7)  = 2
   1670 	  kpds(22) = 1
   1671 	else if (cparm .eq. 't2mn') then
   1672 	  kpds(5)  = 16
   1673 	  kpds(6)  = 105
   1674 	  kpds(7)  = 2
   1675 	  kpds(22) = 1
   1676 	else if (cparm .eq. 'td2m') then
   1677 	  kpds(5)  = 17
   1678 	  kpds(6)  = 105
   1679 	  kpds(7)  = 2
   1680 	  kpds(22) = 1
   1681 	else if (cparm .eq. 'z200') then
   1682 	  kpds(5)  = 7
   1683 	  kpds(6)  = 100
   1684 	  kpds(7)  = 200
   1685 	  if (ctype .eq. 'mean') then
   1686 	    kpds(22) = 0
   1687 	  else if (ctype .eq. 'spr ') then
   1688 	    kpds(22) = 1
   1689 	  endif
   1690 	else if (cparm .eq. 'z500') then
   1691 	  kpds(5)  = 7
   1692 	  kpds(6)  = 100

Page 42          Source Listing                  OUTPUT_STATS
2020-06-15 22:06                                 ecmwfensh.f

   1693 	  kpds(7)  = 500
   1694 	  if (ctype .eq. 'mean') then
   1695 	    kpds(22) = 0
   1696 	  else if (ctype .eq. 'spr ') then
   1697 	    kpds(22) = 1
   1698 	  endif
   1699 	else if (cparm .eq. 'z700') then
   1700 	  kpds(5)  = 7
   1701 	  kpds(6)  = 100
   1702 	  kpds(7)  = 700
   1703 	  if (ctype .eq. 'mean') then
   1704 	    kpds(22) = 0
   1705 	  else if (ctype .eq. 'spr ') then
   1706 	    kpds(22) = 1
   1707 	  endif
   1708 	else if (cparm .eq. 'z850') then
   1709 	  kpds(5)  = 7
   1710 	  kpds(6)  = 850
   1711 	  kpds(7)  = 700
   1712 	  if (ctype .eq. 'mean') then
   1713 	    kpds(22) = 0
   1714 	  else if (ctype .eq. 'spr ') then
   1715 	    kpds(22) = 1
   1716 	  endif
   1717 c new batch 01/04
   1718 	else if (cparm .eq. 'z1k ') then
   1719 	  kpds(5)  = 7
   1720 	  kpds(6)  = 100
   1721 	  kpds(7)  = 1000
   1722 	  if (ctype .eq. 'mean') then
   1723 	    kpds(22) = 0
   1724 	  else if (ctype .eq. 'spr ') then
   1725 	    kpds(22) = 1
   1726 	  endif
   1727 	else if (cparm .eq. 'r500') then
   1728 	  kpds(5)  = 52
   1729 	  kpds(6)  = 100
   1730 	  kpds(7)  = 500
   1731 	  kpds(22) = 1
   1732 	else if (cparm .eq. 'r700') then
   1733 	  kpds(5)  = 52
   1734 	  kpds(6)  = 100
   1735 	  kpds(7)  = 700
   1736 	  kpds(22) = 1
   1737 	else if (cparm .eq. 'r850') then
   1738 	  kpds(5)  = 52
   1739 	  kpds(6)  = 100
   1740 	  kpds(7)  = 850
   1741 	  kpds(22) = 1
   1742 	else if (cparm .eq. 'mslp') then
   1743 	  kpds(5)  = 2
   1744 	  kpds(6)  = 102
   1745 	  kpds(7)  = 0
   1746 	  if (ctype .eq. 'mean') then
   1747 	    kpds(22) = 0
   1748 	  else if (ctype .eq. 'spr ') then 
   1749 	    kpds(22) = 1

Page 43          Source Listing                  OUTPUT_STATS
2020-06-15 22:06                                 ecmwfensh.f

   1750 	  endif
   1751 	else if (cparm .eq. 'psfc') then
   1752 	  kpds(5)  = 1
   1753 	  kpds(6)  = 102
   1754 	  kpds(7)  = 0
   1755 	  if (ctype .eq. 'mean') then
   1756 	    kpds(22) = 0
   1757 	  else if (ctype .eq. 'spr ') then 
   1758 	    kpds(22) = 1
   1759 	  endif
   1760 	else if (cparm .eq. 'prcp') then
   1761 	  kpds(5) = 61
   1762 	  kpds(6) = 1
   1763 	  kpds(7) = 0
   1764 
   1765 C          THIS NEXT STUFF IS ALREADY DONE IN ADJPDS, 
   1766 C          SO COMMENT IT OUT HERE....
   1767 C          if (kpds(14).eq.0) then
   1768 C            kpds(14) = 0
   1769 C            kpds(15) = 0
   1770 C          else
   1771 C            kpds(14) = kpds(14) - 12
   1772 C            kpds(15) = kpds(14) + 12
   1773 C          endif
   1774 
   1775 	  kpds(16) = 4
   1776 	  kpds(22) = 1
   1777 	else if (cparm .eq. 'tcdc') then
   1778 	  kpds(5) = 61
   1779 	  kpds(6) = 200
   1780 	  kpds(7) = 0
   1781 	  kpds(22) = 1
   1782 	else
   1783 	  iready=no
   1784 	endif
   1785 	kens(1)=1
   1786 	kens(2)=5
   1787 	kens(3)=0
   1788 	kens(4)=0
   1789 	kens(5)=255
   1790 	if (ctype .eq. 'mean') then
   1791 	  kens(4)=1
   1792 	else if (ctype .eq. 'spr ') then
   1793 	  kens(4)=11
   1794 	endif
   1795 
   1796 c       ****************************
   1797 c        WRITE GRIB FILE
   1798 c       ****************************
   1799 
   1800         print *,'In output_stats, lugout= ',lugout,' kf= ',kf
   1801         print *,'In output_stats, cparm= ',cparm,' ctype= ',ctype
   1802 c       print *,' '
   1803 
   1804 c       if ( kpds(14) .eq. 72 ) then
   1805 c         print *,' '
   1806 	  write(*,71) (kpds(mm),mm=1,5)

Page 44          Source Listing                  OUTPUT_STATS
2020-06-15 22:06                                 ecmwfensh.f

   1807 	  write(*,72) (kpds(mm),mm=6,10)
   1808 	  write(*,73) (kpds(mm),mm=11,15)
   1809 	  write(*,74) (kpds(mm),mm=16,20)
   1810 	  write(*,75) (kpds(mm),mm=21,25)
   1811 	  write(*,76) (kgds(mm),mm=1,5)
   1812 	  write(*,77) (kgds(mm),mm=6,10)
   1813 	  write(*,78) (kgds(mm),mm=11,15)
   1814 	  write(*,79) (kgds(mm),mm=16,20)
   1815 	  write(*,80) (kgds(mm),mm=21,22)
   1816 	  if ( ctype .eq. 'mean' ) then
   1817 	    write(*,81) datam(1),datam(kf/4),datam(kf/2)
   1818      &                 ,datam(3*kf/4),datam(kf)
   1819 	    call srange(kf,ld,datam)
   1820 	  endif
   1821 	  if ( ctype .eq. 'spr ' ) then
   1822 	    write(*,81) datas(1),datas(kf/4),datas(kf/2)
   1823      &                 ,datas(3*kf/4),datas(kf)
   1824 	    call srange(kf,ld,datas)
   1825 	  endif
   1826 c         print *,' '
   1827 c       endif
   1828 
   1829  71     format('p1=  ',i7,' p2=  ',i7,' p3=  ',i7,' p4=  ',i7,' p5=  '
   1830      &        ,i7)
   1831  72     format('p6=  ',i7,' p7=  ',i7,' p8=  ',i7,' p9=  ',i7,' p10= '
   1832      &        ,i7)
   1833  73     format('p11= ',i7,' p12= ',i7,' p13= ',i7,' p14= ',i7,' p15= '
   1834      &        ,i7)
   1835  74     format('p16= ',i7,' p17= ',i7,' p18= ',i7,' p19= ',i7,' p20= '
   1836      &        ,i7)
   1837  75     format('p21= ',i7,' p22= ',i7,' p23= ',i7,' p24= ',i7,' p25= '
   1838      &        ,i7)
   1839  76     format('g1=  ',i7,' g2=  ',i7,' g3=  ',i7,' g4=  ',i7,' g5=  '
   1840      &        ,i7)
   1841  77     format('g6=  ',i7,' g7=  ',i7,' g8=  ',i7,' g9=  ',i7,' g10= '
   1842      &        ,i7)
   1843  78     format('g11= ',i7,' g12= ',i7,' g13= ',i7,' g14= ',i7,' g15= '
   1844      &        ,i7)
   1845  79     format('g16= ',i7,' g17= ',i7,' g18= ',i7,' g19= ',i7,' g20= '
   1846      &        ,i7)
   1847  80     format('g21= ',i7,' g22= ',i7)
   1848  81     format('f(1)= ',g12.4,' f(kf/4)= ',g12.4,' f(kf/2)= ',g12.4
   1849      &      ,' f(3*kf/4)= ',g12.4,' f(kf)= ',g12.4)
   1850 
   1851 	iret=99
   1852 
   1853         if (iready .eq. 1) then
   1854 
   1855 	  if ( ctype .eq. 'mean' ) then
   1856 	    call putgbe (lugout,kf,kpds,kgds,kens,ld,datam,iret)
   1857 	  endif
   1858 	  if ( ctype .eq. 'spr ' ) then
   1859 	    call putgbe (lugout,kf,kpds,kgds,kens,ld,datas,iret)
   1860 	  endif
   1861 	  if (iret.eq.0) then
   1862 c c         print *,' '
   1863 	    print *,'IRET = 0 after call to putgbe in sub output_stats'

Page 45          Source Listing                  OUTPUT_STATS
2020-06-15 22:06                                 ecmwfensh.f

   1864 c c         print *,' '
   1865 	  else
   1866 	    print *,' '
   1867 	    print *,'!!! ERROR: IRET NE 0 AFTER '
   1868      &	           ,'PUTGBE IN OUTPUT_STATS!!!'
   1869      &             ,cparm,'= cparm',ctype,'=ctype '
   1870      &             ,lugout,'=lugout ',iret,'=iret '
   1871 	    print *,' '
   1872 	  endif
   1873 	else
   1874 	  print *,'This variable not ready'
   1875      &           ,cparm,'= cparm',ctype,'=ctype '
   1876      &           ,lugout,'=lugout ',iret,'=iret '
   1877 	endif
   1878 
   1879       enddo
   1880 
   1881       call grib_close (lugout,ireto)
   1882       if (ireto.gt.0) then
   1883         print *,'ireto,lu from grib_close in output_stats = ',
   1884      ,     ireto,lugout
   1885       endif
   1886 
   1887 c
   1888       return
   1889       end


ENTRY POINTS

  Name                     
                           
 output_stats_             

Page 46          Source Listing                  OUTPUT_STATS
2020-06-15 22:06 Symbol Table                    ecmwfensh.f



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 71                         Label  1829                                                           1806                              
 72                         Label  1831                                                           1807                              
 73                         Label  1833                                                           1808                              
 74                         Label  1835                                                           1809                              
 75                         Label  1837                                                           1810                              
 76                         Label  1839                                                           1811                              
 77                         Label  1841                                                           1812                              
 78                         Label  1843                                                           1813                              
 79                         Label  1845                                                           1814                              
 80                         Label  1847                                                           1815                              
 81                         Label  1848                                                           1817,1822                         
 CPARM                      Dummy  1584     CHAR            4           scalar   ARG,INOUT        1641,1646,1651,1656,1661,1666,1671
                                                                                                  ,1676,1681,1690,1699,1708,1718,172
                                                                                                  7,1732,1737,1742,1751,1760,1777,18
                                                                                                  01,1869,1875                      
 CTYPE                      Local  1625     CHAR            4           scalar                    1635,1636,1685,1687,1694,1696,1703
                                                                                                  ,1705,1712,1714,1722,1724,1746,174
                                                                                                  8,1755,1757,1790,1792,1801,1816,18
                                                                                                  21,1855,1858,1869,1875            
 DATAM                      Dummy  1584     R(8)            8     1     0        ARG,INOUT        1817,1818,1819,1856               
 DATAS                      Dummy  1585     R(8)            8     1     0        ARG,INOUT        1822,1823,1824,1859               
 GRIB_CLOSE                 Subr   1881                                                           1881                              
 GRIB_OPEN_WA               Subr   1627                                                           1627                              
 IREADY                     Local  1640     I(4)            4           scalar                    1640,1783,1853                    
 IRET                       Local  1851     I(4)            4           scalar                    1851,1856,1859,1861,1870,1876     
 IRETO                      Local  1627     I(4)            4           scalar                    1627,1628,1630,1881,1882,1884     
 ISTAT                      Local  1633     I(4)            4           scalar                    1633,1635,1636                    
 KENS                       Local  1621     I(4)            4     1     200                       1785,1786,1787,1788,1789,1791,1793
                                                                                                  ,1856,1859                        
 KF                         Dummy  1584     I(4)            4           scalar   ARG,INOUT        1622,1623,1624,1800,1817,1818,1819
                                                                                                  ,1822,1823,1824,1856,1859         
 KGDS                       Dummy  1584     I(4)            4     1     200      ARG,INOUT        1811,1812,1813,1814,1815,1856,1859
 KPDS                       Dummy  1584     I(4)            4     1     200      ARG,INOUT        1642,1643,1644,1645,1647,1648,1649
                                                                                                  ,1650,1652,1653,1654,1655,1657,165
                                                                                                  8,1659,1660,1662,1663,1664,1665,16
                                                                                                  67,1668,1669,1670,1672,1673,1674,1
                                                                                                  675,1677,1678,1679,1680,1682,1683,
                                                                                                  1684,1686,1688,1691,1692,1693,1695
                                                                                                  ,1697,1700,1701,1702,1704,1706,170
                                                                                                  9,1710,1711,1713,1715,1719,1720,17
                                                                                                  21,1723,1725,1728,1729,1730,1731,1
                                                                                                  733,1734,1735,1736,1738,1739,1740,
                                                                                                  1741,1743,1744,1745,1747,1749,1752
                                                                                                  ,1753,1754,1756,1758,1761,1762,176
                                                                                                  3,1775,1776,1778,1779,1780,1781,18
                                                                                                  06,1807,1808,1809,1810,1856,1859  
 LD                         Dummy  1584     L(4)            4     1     0        ARG,INOUT        1638,1819,1824,1856,1859          
 LUGOUT                     Dummy  1584     I(4)            4           scalar   ARG,INOUT        1627,1630,1800,1856,1859,1870,1876
                                                                                                  ,1881,1884                        
 MM                         Local  1806     I(4)            4           scalar                    1806,1807,1808,1809,1810,1811,1812
                                                                                                  ,1813,1814,1815                   

Page 47          Source Listing                  OUTPUT_STATS
2020-06-15 22:06 Symbol Table                    ecmwfensh.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NO                         Local  1783     I(4)            4           scalar                    1783                              
 OUTPUT_STATS               Subr   1584                                                                                             
 PUTGBE                     Subr   1856                                                           1856,1859                         
 SRANGE                     Subr   1819                                                           1819,1824                         

Page 48          Source Listing                  OUTPUT_STATS
2020-06-15 22:06                                 ecmwfensh.f

   1890 c
   1891 c----------------------------------------------------------------------c
   1892 c----------------------------------------------------------------------c
   1893 c
   1894           subroutine srange(nlat,ld,var)
   1895           dimension var(nlat)
   1896           logical ld(nlat)
   1897 c produces range, mean, avg dev, std dev, skew
   1898           ptsn=nlat
   1899           sa=0.0
   1900           dmin=1.e40
   1901           dmax=-1.e40
   1902           do j=1,nlat
   1903 	    if (ld(j)) then
   1904 	      sa=sa+var(j)
   1905 	      dmin=min(dmin,var(j))
   1906 	      dmax=max(dmax,var(j))
   1907 	    endif
   1908           enddo
   1909           avg=sa/ptsn
   1910           sl=0.0
   1911           sv=0.0
   1912           do j=1,nlat
   1913 	    if (ld(j)) then
   1914 	      sl=sl+abs(var(j)-avg)
   1915 	      sv=sv+(var(j)-avg)**2
   1916 	    endif
   1917           enddo
   1918           adev=sl/ptsn
   1919           sdev=sqrt(sv/(ptsn-1))
   1920           if (sdev.gt.0.0) then
   1921             ss=0.0
   1922             do j=1,nlat
   1923 	      if (ld(j)) then
   1924 		devn=(var(j)-avg)/sdev
   1925 		ss=ss+devn**3
   1926 	      endif
   1927             enddo
   1928             skew=ss/ptsn
   1929           else
   1930             skew=0.0
   1931           endif
   1932 c scale for cleaner output
   1933           outmin=1.0e10
   1934           outmax=1.0e-10
   1935           if ( dmin.ne.0.0 ) then
   1936             if (outmin.gt.abs(dmin)) then
   1937                 outmin =  abs(dmin)
   1938             endif
   1939             if (outmax.lt.abs(dmin)) then
   1940                 outmax =  abs(dmin)
   1941             endif
   1942           else
   1943             if (outmin.gt.1.0) then
   1944                 outmin =  1.0
   1945             endif
   1946             if (outmax.lt.1.0) then

Page 49          Source Listing                  SRANGE
2020-06-15 22:06                                 ecmwfensh.f

   1947                 outmax =  1.0
   1948             endif
   1949           endif
   1950           if ( dmax.ne.0.0 ) then
   1951             if (outmin.gt.abs(dmax)) then
   1952                 outmin =  abs(dmax)
   1953             endif
   1954             if (outmax.lt.abs(dmax)) then
   1955                 outmax =  abs(dmax)
   1956             endif
   1957           else
   1958             if (outmin.gt.1.0) then
   1959                 outmin =  1.0
   1960             endif
   1961             if (outmax.lt.1.0) then
   1962                 outmax =  1.0
   1963             endif
   1964           endif
   1965           if (  avg.ne.0.0 ) then
   1966             if (outmin.gt.abs(avg)) then
   1967                 outmin =  abs(avg)
   1968             endif
   1969             if (outmax.lt.abs(avg)) then
   1970                 outmax =  abs(avg)
   1971             endif
   1972           else
   1973             if (outmin.gt.1.0) then
   1974                 outmin =  1.0
   1975             endif
   1976             if (outmax.lt.1.0) then
   1977                 outmax =  1.0
   1978             endif
   1979           endif
   1980           if ( adev.ne.0.0 ) then
   1981             if (outmin.gt.abs(adev)) then
   1982                 outmin =  abs(adev)
   1983             endif
   1984             if (outmax.lt.abs(adev)) then
   1985                 outmax =  abs(adev)
   1986             endif
   1987           else
   1988             if (outmin.gt.1.0) then
   1989                 outmin =  1.0
   1990             endif
   1991             if (outmax.lt.1.0) then
   1992                 outmax =  1.0
   1993             endif
   1994           endif
   1995           if ( sdev.ne.0.0 ) then
   1996             if (outmin.gt.abs(sdev)) then
   1997                 outmin =  abs(sdev)
   1998             endif
   1999             if (outmax.lt.abs(sdev)) then
   2000                 outmax =  abs(sdev)
   2001             endif
   2002           else
   2003             if (outmin.gt.1.0) then

Page 50          Source Listing                  SRANGE
2020-06-15 22:06                                 ecmwfensh.f

   2004                 outmin =  1.0
   2005             endif
   2006             if (outmax.lt.1.0) then
   2007                 outmax =  1.0
   2008             endif
   2009           endif
   2010           if ( skew.ne.0.0 ) then
   2011             if (outmin.gt.abs(skew)) then
   2012                 outmin =  abs(skew)
   2013             endif
   2014             if (outmax.lt.abs(skew)) then
   2015                 outmax =  abs(skew)
   2016             endif
   2017           else
   2018             if (outmin.gt.1.0) then
   2019                 outmin =  1.0
   2020             endif
   2021             if (outmax.lt.1.0) then
   2022                 outmax =  1.0
   2023             endif
   2024           endif
   2025           if ( (outmax.lt.9.9e4) .and. (outmin.gt.1.0e-5) ) then
   2026             write(6,'('' '',6f19.13)')    dmin,dmax,avg,adev,sdev,skew
   2027           else
   2028             write(6,'('' '',1p,6e19.10)') dmin,dmax,avg,adev,sdev,skew
   2029           endif
   2030 c         print *,dmin,dmax,avg,adev,sdev,skew
   2031           return
   2032           end

Page 51          Source Listing                  SRANGE
2020-06-15 22:06 Entry Points                    ecmwfensh.f



ENTRY POINTS

  Name               
                     
 srange_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   1914                                 scalar                    1914,1936,1937,1939,1940,1951,1952
                                                                                                  ,1954,1955,1966,1967,1969,1970,198
                                                                                                  1,1982,1984,1985,1996,1997,1999,20
                                                                                                  00,2011,2012,2014,2015            
 ADEV                       Local  1918     R(8)            8           scalar                    1918,1980,1981,1982,1984,1985,2026
                                                                                                  ,2028                             
 AVG                        Local  1909     R(8)            8           scalar                    1909,1914,1915,1924,1965,1966,1967
                                                                                                  ,1969,1970,2026,2028              
 DEVN                       Local  1924     R(8)            8           scalar                    1924,1925                         
 DMAX                       Local  1901     R(8)            8           scalar                    1901,1906,1950,1951,1952,1954,1955
                                                                                                  ,2026,2028                        
 DMIN                       Local  1900     R(8)            8           scalar                    1900,1905,1935,1936,1937,1939,1940
                                                                                                  ,2026,2028                        
 J                          Local  1902     I(4)            4           scalar                    1902,1903,1904,1905,1906,1912,1913
                                                                                                  ,1914,1915,1922,1923,1924         
 LD                         Dummy  1894     L(4)            4     1     0        ARG,INOUT        1903,1913,1923                    
 MAX                        Func   1906                                 scalar                    1906                              
 MIN                        Func   1905                                 scalar                    1905                              
 NLAT                       Dummy  1894     I(4)            4           scalar   ARG,INOUT        1895,1896,1898,1902,1912,1922     
 OUTMAX                     Local  1934     R(8)            8           scalar                    1934,1939,1940,1946,1947,1954,1955
                                                                                                  ,1961,1962,1969,1970,1976,1977,198
                                                                                                  4,1985,1991,1992,1999,2000,2006,20
                                                                                                  07,2014,2015,2021,2022,2025       
 OUTMIN                     Local  1933     R(8)            8           scalar                    1933,1936,1937,1943,1944,1951,1952
                                                                                                  ,1958,1959,1966,1967,1973,1974,198
                                                                                                  1,1982,1988,1989,1996,1997,2003,20
                                                                                                  04,2011,2012,2018,2019,2025       
 PTSN                       Local  1898     R(8)            8           scalar                    1898,1909,1918,1919,1928          
 SA                         Local  1899     R(8)            8           scalar                    1899,1904,1909                    
 SDEV                       Local  1919     R(8)            8           scalar                    1919,1920,1924,1995,1996,1997,1999
                                                                                                  ,2000,2026,2028                   
 SKEW                       Local  1928     R(8)            8           scalar                    1928,1930,2010,2011,2012,2014,2015
                                                                                                  ,2026,2028                        
 SL                         Local  1910     R(8)            8           scalar                    1910,1914,1918                    
 SQRT                       Func   1919                                 scalar                    1919                              
 SRANGE                     Subr   1894                                                                                             
 SS                         Local  1921     R(8)            8           scalar                    1921,1925,1928                    
 SV                         Local  1911     R(8)            8           scalar                    1911,1915,1919                    
 VAR                        Dummy  1894     R(8)            8     1     0        ARG,INOUT        1904,1905,1906,1914,1915,1924     

Page 52          Source Listing                  SRANGE
2020-06-15 22:06                                 ecmwfensh.f

   2033 c
   2034 c----------------------------------------------------------------------c
   2035 c----------------------------------------------------------------------c
   2036 c
   2037       subroutine grange(n,ld,d,dmin,dmax)
   2038 c$$$  SUBPROGRAM DOCUMENTATION BLOCK
   2039 C                .      .    .                                       .
   2040 C SUBPROGRAM:    GRANGE
   2041 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   2042 C
   2043 C ABSTRACT: Calculate the maximum and minimum values in an array
   2044 C
   2045 C PROGRAM HISTORY LOG:
   2046 C   97-01-17  MARCHOK     original program
   2047 C   01-01-16  WOBUS       added DOCBLOCK
   2048 C
   2049 C USAGE:    CALL PROGRAM-NAME(INARG1, INARG2, WRKARG, OUTARG1, ... )
   2050 C   INPUT ARGUMENT LIST:
   2051 c     n        - dimension of the array
   2052 c     ld       - logical array (bit map)
   2053 c     d        - array
   2054 C
   2055 C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
   2056 c     dmin     - minimum value in array d
   2057 c     dmin     - maximum value in array d
   2058 C
   2059 C ATTRIBUTES:
   2060 C   MACHINE:  IBM SP
   2061 C
   2062 C$$$
   2063       logical ld
   2064       dimension ld(n),d(n)
   2065 c
   2066       dmin=1.e40
   2067       dmax=-1.e40
   2068 c
   2069       do i=1,n
   2070         if(ld(i)) then
   2071           dmin=min(dmin,d(i))
   2072           dmax=max(dmax,d(i))
   2073         endif
   2074       enddo
   2075 c
   2076       return
   2077       end

Page 53          Source Listing                  GRANGE
2020-06-15 22:06 Entry Points                    ecmwfensh.f



ENTRY POINTS

  Name               
                     
 grange_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D                          Dummy  2037     R(8)            8     1     0        ARG,INOUT        2071,2072                         
 DMAX                       Dummy  2037     R(8)            8           scalar   ARG,INOUT        2067,2072                         
 DMIN                       Dummy  2037     R(8)            8           scalar   ARG,INOUT        2066,2071                         
 GRANGE                     Subr   2037                                                                                             
 I                          Local  2069     I(4)            4           scalar                    2069,2070,2071,2072               
 LD                         Dummy  2037     L(4)            4     1     0        ARG,INOUT        2070                              
 MAX                        Func   2072                                 scalar                    2072                              
 MIN                        Func   2071                                 scalar                    2071                              
 N                          Dummy  2037     I(4)            4           scalar   ARG,INOUT        2064,2069                         

Page 54          Source Listing                  GRANGE
2020-06-15 22:06                                 ecmwfensh.f

   2078 c
   2079 c----------------------------------------------------------------------c
   2080 c----------------------------------------------------------------------c
   2081 c
   2082       SUBROUTINE GETGBECE(LUGB,LUGI,JF,J,JPDS,JGDS,JENS,
   2083      &                              KF,K,KPDS,KGDS,KENS,LB,F,IRET,
   2084      &                              ktype,kfnum,ktot)
   2085 C$$$  SUBPROGRAM DOCUMENTATION BLOCK
   2086 C
   2087 C SUBPROGRAM: GETGBECE       FINDS AND UNPACKS A GRIB MESSAGE
   2088 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   2089 C
   2090 C ABSTRACT: FIND AND UNPACK A GRIB MESSAGE, ECMWF ENSEMBLE VERSION.
   2091 C   READ AN ASSOCIATED GRIB INDEX FILE (UNLESS IT ALREADY WAS READ).
   2092 C   FIND IN THE INDEX FILE A REFERENCE TO THE GRIB MESSAGE REQUESTED.
   2093 C   THE GRIB MESSAGE REQUEST SPECIFIES THE NUMBER OF MESSAGES TO SKIP
   2094 C   AND THE UNPACKED PDS AND GDS PARAMETERS.  (A REQUESTED PARAMETER
   2095 C   OF -1 MEANS TO ALLOW ANY VALUE OF THIS PARAMETER TO BE FOUND.)
   2096 C   IF THE REQUESTED GRIB MESSAGE IS FOUND, THEN IT IS READ FROM THE
   2097 C   GRIB FILE AND UNPACKED.  ITS MESSAGE NUMBER IS RETURNED ALONG WITH
   2098 C   THE UNPACKED PDS AND GDS PARAMETERS, THE UNPACKED BITMAP (IF ANY),
   2099 C   AND THE UNPACKED DATA.  IF THE GRIB MESSAGE IS NOT FOUND, THEN THE
   2100 C   RETURN CODE WILL BE NONZERO.
   2101 C
   2102 C PROGRAM HISTORY LOG:
   2103 C   94-04-01  IREDELL
   2104 C   97-01-17  MARCHOK - modified version for ECMWF ensemble GRIB ext.
   2105 C   01-01-16  WOBUS   - renamed and updated DOCBLOCK
   2106 C
   2107 C USAGE:    CALL GETGBECE(LUGB,LUGI,JF,J,JPDS,JGDS,JENS,
   2108 C    &                              KF,K,KPDS,KGDS,KENS,LB,F,IRET)
   2109 C   INPUT ARGUMENTS:
   2110 C     LUGB         LOGICAL UNIT OF THE UNBLOCKED GRIB DATA FILE
   2111 C     LUGI         LOGICAL UNIT OF THE UNBLOCKED GRIB INDEX FILE
   2112 C     JF           INTEGER MAXIMUM NUMBER OF DATA POINTS TO UNPACK
   2113 C     J            INTEGER NUMBER OF MESSAGES TO SKIP
   2114 C                  (=0 TO SEARCH FROM BEGINNING)
   2115 C                  (<0 TO REOPEN INDEX FILE AND SEARCH FROM BEGINNING)
   2116 C     JPDS         INTEGER (25) PDS PARAMETERS FOR WHICH TO SEARCH
   2117 C                  (=-1 FOR WILDCARD)
   2118 C     JGDS         INTEGER (22) GDS PARAMETERS FOR WHICH TO SEARCH
   2119 C                  (ONLY SEARCHED IF JPDS(3)=255)
   2120 C                  (=-1 FOR WILDCARD)
   2121 C     JENS         INTEGER (5) ENSEMBLE PDS PARMS FOR WHICH TO SEARCH
   2122 C                  (ONLY SEARCHED IF JPDS(23)=3)
   2123 C                  (=-1 FOR WILDCARD)
   2124 C   OUTPUT ARGUMENTS:
   2125 C     KF           INTEGER NUMBER OF DATA POINTS UNPACKED
   2126 C     K            INTEGER MESSAGE NUMBER UNPACKED
   2127 C                  (CAN BE SAME AS J IN CALLING PROGRAM
   2128 C                  IN ORDER TO FACILITATE MULTIPLE SEARCHES)
   2129 C     KPDS         INTEGER (25) UNPACKED PDS PARAMETERS
   2130 C     KGDS         INTEGER (22) UNPACKED GDS PARAMETERS
   2131 c
   2132 c
   2133 C     KENS         INTEGER (5) UNPACKED ENSEMBLE PDS PARMS
   2134 c

Page 55          Source Listing                  GETGBECE
2020-06-15 22:06                                 ecmwfensh.f

   2135 c     ***********  CODE ADDED FOR ECMWF ORIGINAL ENSEMBLE FILES  ****
   2136 c
   2137 c     ktype        10 = ECMWF control forecast
   2138 c                  11 = ECMWF perturbed forecast
   2139 c     kfnum        Ensemble Forecast Number;
   2140 c                  Control Forecast is number 0,
   2141 c                  perturbed forecast are 1-nn, where
   2142 c                  positive perturbation is an odd number,
   2143 c                  negative perturbation is an even number.
   2144 c     ktot         Total number of forecast in ensemble.
   2145 c                  This number includes the control forecast.
   2146 c
   2147 C     LB           LOGICAL (KF) UNPACKED BITMAP IF PRESENT
   2148 C     F            REAL (KF) UNPACKED DATA
   2149 C     IRET         INTEGER RETURN CODE
   2150 C                    0      ALL OK
   2151 C                    96     ERROR READING INDEX FILE
   2152 C                    97     ERROR READING GRIB FILE
   2153 C                    98     NUMBER OF DATA POINTS GREATER THAN JF
   2154 C                    99     REQUEST NOT FOUND
   2155 C                    OTHER  W3FI63 GRIB UNPACKER RETURN CODE
   2156 C
   2157 C SUBPROGRAMS CALLED:
   2158 C   BAopenr        open for BYTE-ADDRESSABLE READ, read-only
   2159 C   BAopen         open for BYTE-ADDRESSABLE READ
   2160 C   BAclose        close for BYTE-ADDRESSABLE READ
   2161 C   BAREAD         BYTE-ADDRESSABLE READ
   2162 C   GBYTEC          UNPACK BYTES
   2163 C   FI632          UNPACK PDS
   2164 C   FI633          UNPACK GDS
   2165 C   PDSEUP         UNPACK PDS EXTENSION
   2166 C   W3FI63         UNPACK GRIB
   2167 C
   2168 C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
   2169 c IMPORTANT NOTE: THIS GETGBENS SUBROUTINE HAS BEEN MODIFIED!!!  
   2170 C                 IT IS *NOT* THE SAME GETGBENS AS IS FOUND IN  
   2171 C                 /NWPROD/W3LIB.  MODIFICATIONS WERE MADE TO IT
   2172 C                 TO BE ABLE TO READ THE ECMWF PDS EXTENSION  
   2173 c  Modified getgbens has been renamed getgbece
   2174 c
   2175 C ATTRIBUTES:
   2176 C   LANGUAGE: CRAY FORTRAN
   2177 C   LANGUAGE: ibm FORTRAN
   2178 C
   2179 C$$$
   2180       INTEGER JPDS(25),JGDS(22),KPDS(25),KGDS(22)
   2181       PARAMETER(LPDS=23,LGDS=22)
   2182       INTEGER JENS(5),KENS(5)
   2183       LOGICAL LB(JF)
   2184       REAL F(JF)
   2185       PARAMETER(MBUF=8192*128)
   2186       CHARACTER CBUF(MBUF)
   2187       SAVE LUX,NSKP,NLEN,NNUM,CBUF
   2188       DATA LUX/0/
   2189       CHARACTER CHEAD(2)*81
   2190       CHARACTER CPDS(80)*1,CGDS(42)*1
   2191 C     INTEGER KPTR(16)

Page 56          Source Listing                  GETGBECE
2020-06-15 22:06                                 ecmwfensh.f

   2192       INTEGER KPTR(20)
   2193       INTEGER IPDSP(LPDS),JPDSP(LPDS),IGDSP(LGDS),JGDSP(LGDS)
   2194       INTEGER IENSP(5),JENSP(5)
   2195       CHARACTER GRIB(200+17*JF/8)*1
   2196 C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   2197 C  READ INDEX FILE
   2198       IF(J.LT.0.OR.LUGI.NE.LUX) THEN
   2199         call grib_open_r (lugb,ireto)
   2200         if (ireto.gt.0) then
   2201           print *,'ireto,lu from grib_open_r in getgbece = ',ireto,lugb
   2202         endif
   2203         call grib_open_r (lugi,ireto)
   2204         if (ireto.gt.0) then
   2205           print *,'ireto,lu from grib_open_r in getgbece = ',ireto,lugi
   2206         endif
   2207         print *,' in getgbece:  units b,i: ',lugb,lugi
   2208 c       REWIND LUGI
   2209 c       READ(LUGI,IOSTAT=IOS) CHEAD
   2210 c             CALL BAREAD(LUGB,LSKIP,LGRIB,LREAD,GRIB)
   2211         ios=-1
   2212         nskp=0
   2213         lgrib=81
   2214         CALL BAREAD(LUGI,NSKP,LGRIB,LREAD,CHEAD(1))
   2215          if ( lgrib.eq.lread ) ios=0
   2216 c        print *,'ios after chead read = ',ios
   2217          print *,'chead 42-47 = ',CHEAD(1)(42:47)
   2218          print *,'chead 38-43 = ',CHEAD(1)(38:43)
   2219          print *,' nskp, lgrib, lread = ',nskp,lgrib,lread
   2220         nskp=lread
   2221         CALL BAREAD(LUGI,NSKP,LGRIB,LREAD,CHEAD(2))
   2222          print *,' nskp, lgrib, lread = ',nskp,lgrib,lread
   2223         IF(IOS.EQ.0.AND.CHEAD(1)(42:47).EQ.'GB1IX1') THEN
   2224 c       IF(IOS.EQ.0.AND.CHEAD(1)(38:43).EQ.'GB1IX1') THEN
   2225           LUX=0
   2226          READ(CHEAD(2),'(8X,3I10,2X,A40)',IOSTAT=IOS) NSKP,NLEN,NNUM
   2227            print *,'nlen= ',nlen,' ios= ',ios,' nskp= ',nskp,' nnum= '
   2228      &           ,nnum
   2229           IF(IOS.EQ.0) THEN
   2230             NBUF=NNUM*NLEN
   2231             IF(NBUF.GT.MBUF) THEN
   2232               PRINT *,'GETGB: INCREASE BUFFER FROM ',MBUF,' TO ',NBUF
   2233               NNUM=MBUF/NLEN
   2234               NBUF=NNUM*NLEN
   2235             ENDIF
   2236             CALL BAREAD(LUGI,NSKP,NBUF,LBUF,CBUF)
   2237             IF(LBUF.EQ.NBUF) THEN
   2238 c              print *,'************** lux being set equal to lugi'
   2239               LUX=LUGI
   2240               J=MAX(J,0)
   2241             ENDIF
   2242           ENDIF
   2243         ENDIF
   2244       ENDIF
   2245 C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   2246 C  SEARCH FOR REQUEST
   2247       KENS=0
   2248       LGRIB=0

Page 57          Source Listing                  GETGBECE
2020-06-15 22:06                                 ecmwfensh.f

   2249       KJ=J
   2250       K=J
   2251       KF=0
   2252       IF(J.GE.0.AND.LUGI.EQ.LUX) THEN
   2253         LPDSP=0
   2254         DO I=1,LPDS
   2255           IF(JPDS(I).NE.-1) THEN
   2256             LPDSP=LPDSP+1
   2257             IPDSP(LPDSP)=I
   2258             JPDSP(LPDSP)=JPDS(I)
   2259           ENDIF
   2260         ENDDO
   2261         LGDSP=0
   2262         IF(JPDS(3).EQ.255) THEN
   2263           DO I=1,LGDS
   2264             IF(JGDS(I).NE.-1) THEN
   2265               LGDSP=LGDSP+1
   2266               IGDSP(LGDSP)=I
   2267               JGDSP(LGDSP)=JGDS(I)
   2268             ENDIF
   2269           ENDDO
   2270         ENDIF
   2271         LENSP=0
   2272         IF(JPDS(23).EQ.3 .or. jpds(23).eq.0.or.jpds(23).eq.-1) THEN
   2273           DO I=1,5
   2274             IF(JENS(I).NE.-1) THEN
   2275               LENSP=LENSP+1
   2276               IENSP(LENSP)=I
   2277               JENSP(LENSP)=JENS(I)
   2278             ENDIF
   2279           ENDDO
   2280         else
   2281           print *,'!!! jpds(23) != 0 or 3, jpds(23)= ',jpds(23)
   2282         ENDIF
   2283         IRET=99
   2284         DOWHILE(LGRIB.EQ.0.AND.KJ.LT.NNUM)
   2285           KJ=KJ+1
   2286           LT=0
   2287           IF(LPDSP.GT.0) THEN
   2288             CPDS=CBUF((KJ-1)*NLEN+26:(KJ-1)*NLEN+53)
   2289             KPTR=0
   2290             CALL GBYTEC(CBUF,KPTR(3),(KJ-1)*NLEN*8+25*8,3*8)
   2291             CALL FI632(CPDS,KPTR,KPDS,IRET)
   2292 c            print *, 'after fi632, iret=',iret
   2293             DO I=1,LPDSP
   2294               IP=IPDSP(I)
   2295               LT=LT+ABS(JPDS(IP)-KPDS(IP))
   2296             ENDDO
   2297           ENDIF
   2298           IF(LT.EQ.0.AND.LGDSP.GT.0) THEN
   2299             CGDS=CBUF((KJ-1)*NLEN+54:(KJ-1)*NLEN+95)
   2300             KPTR=0
   2301             CALL FI633(CGDS,KPTR,KGDS,IRET)
   2302 c            print *, 'after fi633, iret=',iret
   2303             DO I=1,LGDSP
   2304               IP=IGDSP(I)
   2305               LT=LT+ABS(JGDS(IP)-KGDS(IP))

Page 58          Source Listing                  GETGBECE
2020-06-15 22:06                                 ecmwfensh.f

   2306             ENDDO
   2307           ENDIF
   2308 c          print *, 'lt=',lt,'lensp=',lensp
   2309           IF(LT.EQ.0.AND.LENSP.GT.0) THEN
   2310             CPDS(41:80)=CBUF((KJ-1)*NLEN+113:(KJ-1)*NLEN+152)
   2311 c           CALL PDSEUP(KENS,KPROB,XPROB,KCLUST,KMEMBR,45,CPDS)
   2312             CALL ecmext(ktype,kfnum,ktot,45,CPDS)
   2313             DO I=1,LENSP
   2314               IP=IENSP(I)
   2315               LT=LT+ABS(JENS(IP)-KENS(IP))
   2316             ENDDO
   2317           ENDIF
   2318 C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   2319 C  READ AND UNPACK GRIB DATA
   2320           IF(LT.EQ.0) THEN
   2321             CALL GBYTEC(CBUF,LSKIP,(KJ-1)*NLEN*8,4*8)
   2322             CALL GBYTEC(CBUF,LGRIB,(KJ-1)*NLEN*8+20*8,4*8)
   2323             CGDS=CBUF((KJ-1)*NLEN+54:(KJ-1)*NLEN+95)
   2324             KPTR=0
   2325             CALL FI633(CGDS,KPTR,KGDS,IRET)
   2326 c           print *, 'after FI633, iret=',iret
   2327             IF(KPDS(23).EQ.3 .or. kpds(23).eq.0.or.kpds(23).eq.-1) THEN
   2328               CPDS(41:80)=CBUF((KJ-1)*NLEN+113:(KJ-1)*NLEN+152)
   2329 c              CALL PDSEUP(KENS,KPROB,XPROB,KCLUST,KMEMBR,45,CPDS)
   2330               CALL ecmext(ktype,kfnum,ktot,45,CPDS)
   2331             else
   2332               print *,'!!! kpds(23) != 0 or 3, kpds(23)= ',kpds(23)
   2333             ENDIF
   2334             IF(LGRIB.LE.200+17*JF/8.AND.KGDS(2)*KGDS(3).LE.JF) THEN
   2335               CALL BAREAD(LUGB,LSKIP,LGRIB,LREAD,GRIB)
   2336               IF(LREAD.EQ.LGRIB) THEN
   2337                 CALL W3FI63(GRIB,KPDS,KGDS,LB,F,KPTR,IRET)
   2338 c               print *, 'after W3FI63, iret=',iret
   2339                 IF(IRET.EQ.0) THEN
   2340                   K=KJ
   2341                   KF=KPTR(10)
   2342                 ENDIF
   2343               ELSE
   2344                 IRET=97
   2345               ENDIF
   2346             ELSE
   2347               IRET=98
   2348             ENDIF
   2349           ENDIF
   2350         ENDDO
   2351       ELSE
   2352         IRET=96
   2353       ENDIF
   2354 C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   2355       RETURN
   2356       END

Page 59          Source Listing                  GETGBECE
2020-06-15 22:06 Entry Points                    ecmwfensh.f



ENTRY POINTS

  Name                 
                       
 getgbece_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   2295                                 scalar                    2295,2305,2315                    
 BAREAD                     Subr   2214                                                           2214,2221,2236,2335               
 CBUF                       Local  2186     CHAR            1     1     1048576  SAVE             2236,2288,2290,2299,2310,2321,2322
                                                                                                  ,2323,2328                        
 CGDS                       Local  2190     CHAR            1     1     42                        2299,2301,2323,2325               
 CHEAD                      Local  2189     CHAR            81    1     2                         2214,2217,2218,2221,2223,2226     
 CPDS                       Local  2190     CHAR            1     1     80                        2288,2291,2310,2312,2328,2330     
 ECMEXT                     Subr   2312                                                           2312,2330                         
 F                          Dummy  2083     R(8)            8     1     0        ARG,INOUT        2337                              
 FI632                      Subr   2291                                                           2291                              
 FI633                      Subr   2301                                                           2301,2325                         
 GBYTEC                     Subr   2290                                                           2290,2321,2322                    
 GETGBECE                   Subr   2082                                                                                             
 GRIB                       Local  2195     CHAR            1     1     0                         2335,2337                         
 GRIB_OPEN_R                Subr   2199                                                           2199,2203                         
 I                          Local  2254     I(4)            4           scalar                    2254,2255,2257,2258,2263,2264,2266
                                                                                                  ,2267,2273,2274,2276,2277,2293,229
                                                                                                  4,2303,2304,2313,2314             
 IENSP                      Local  2194     I(4)            4     1     5                         2276,2314                         
 IGDSP                      Local  2193     I(4)            4     1     22                        2266,2304                         
 IOS                        Local  2211     I(4)            4           scalar                    2211,2215,2223,2226,2227,2229     
 IP                         Local  2294     I(4)            4           scalar                    2294,2295,2304,2305,2314,2315     
 IPDSP                      Local  2193     I(4)            4     1     23                        2257,2294                         
 IRET                       Dummy  2083     I(4)            4           scalar   ARG,INOUT        2283,2291,2301,2325,2337,2339,2344
                                                                                                  ,2347,2352                        
 IRETO                      Local  2199     I(4)            4           scalar                    2199,2200,2201,2203,2204,2205     
 J                          Dummy  2082     I(4)            4           scalar   ARG,INOUT        2198,2240,2249,2250,2252          
 JENS                       Dummy  2082     I(4)            4     1     5        ARG,INOUT        2274,2277,2315                    
 JENSP                      Local  2194     I(4)            4     1     5                         2277                              
 JF                         Dummy  2082     I(4)            4           scalar   ARG,INOUT        2183,2184,2195,2334               
 JGDS                       Dummy  2082     I(4)            4     1     22       ARG,INOUT        2264,2267,2305                    
 JGDSP                      Local  2193     I(4)            4     1     22                        2267                              
 JPDS                       Dummy  2082     I(4)            4     1     25       ARG,INOUT        2255,2258,2262,2272,2281,2295     
 JPDSP                      Local  2193     I(4)            4     1     23                        2258                              
 K                          Dummy  2083     I(4)            4           scalar   ARG,INOUT        2250,2340                         
 KENS                       Dummy  2083     I(4)            4     1     5        ARG,INOUT        2247,2315                         
 KF                         Dummy  2083     I(4)            4           scalar   ARG,INOUT        2251,2341                         
 KFNUM                      Dummy  2084     I(4)            4           scalar   ARG,INOUT        2312,2330                         
 KGDS                       Dummy  2083     I(4)            4     1     22       ARG,INOUT        2301,2305,2325,2334,2337          
 KJ                         Local  2249     I(4)            4           scalar                    2249,2284,2285,2288,2290,2299,2310
                                                                                                  ,2321,2322,2323,2328,2340         
 KPDS                       Dummy  2083     I(4)            4     1     25       ARG,INOUT        2291,2295,2327,2332,2337          
 KPTR                       Local  2192     I(4)            4     1     20                        2289,2290,2291,2300,2301,2324,2325
                                                                                                  ,2337,2341                        

Page 60          Source Listing                  GETGBECE
2020-06-15 22:06 Symbol Table                    ecmwfensh.f

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 KTOT                       Dummy  2084     I(4)            4           scalar   ARG,INOUT        2312,2330                         
 KTYPE                      Dummy  2084     I(4)            4           scalar   ARG,INOUT        2312,2330                         
 LB                         Dummy  2083     L(4)            4     1     0        ARG,INOUT        2337                              
 LBUF                       Local  2236     I(4)            4           scalar                    2236,2237                         
 LENSP                      Local  2271     I(4)            4           scalar                    2271,2275,2276,2277,2309,2313     
 LGDS                       Param  2181     I(4)            4           scalar                    2193,2263                         
 LGDSP                      Local  2261     I(4)            4           scalar                    2261,2265,2266,2267,2298,2303     
 LGRIB                      Local  2213     I(4)            4           scalar                    2213,2214,2215,2219,2221,2222,2248
                                                                                                  ,2284,2322,2334,2335,2336         
 LPDS                       Param  2181     I(4)            4           scalar                    2193,2254                         
 LPDSP                      Local  2253     I(4)            4           scalar                    2253,2256,2257,2258,2287,2293     
 LREAD                      Local  2214     I(4)            4           scalar                    2214,2215,2219,2220,2221,2222,2335
                                                                                                  ,2336                             
 LSKIP                      Local  2321     I(4)            4           scalar                    2321,2335                         
 LT                         Local  2286     I(4)            4           scalar                    2286,2295,2298,2305,2309,2315,2320
 LUGB                       Dummy  2082     I(4)            4           scalar   ARG,INOUT        2199,2201,2207,2335               
 LUGI                       Dummy  2082     I(4)            4           scalar   ARG,INOUT        2198,2203,2205,2207,2214,2221,2236
                                                                                                  ,2239,2252                        
 LUX                        Local  2187     I(4)            4           scalar   SAVE             2188,2198,2225,2239,2252          
 MAX                        Func   2240                                 scalar                    2240                              
 MBUF                       Param  2185     I(4)            4           scalar                    2186,2231,2232,2233               
 NBUF                       Local  2230     I(4)            4           scalar                    2230,2231,2232,2234,2236,2237     
 NLEN                       Local  2187     I(4)            4           scalar   SAVE             2226,2227,2230,2233,2234,2288,2290
                                                                                                  ,2299,2310,2321,2322,2323,2328    
 NNUM                       Local  2187     I(4)            4           scalar   SAVE             2226,2228,2230,2233,2234,2284     
 NSKP                       Local  2187     I(4)            4           scalar   SAVE             2212,2214,2219,2220,2221,2222,2226
                                                                                                  ,2227,2236                        
 W3FI63                     Subr   2337                                                           2337                              

Page 61          Source Listing                  GETGBECE
2020-06-15 22:06                                 ecmwfensh.f

   2357 c
   2358 C----------------------------------------------------------------------c
   2359 C----------------------------------------------------------------------c
   2360 c
   2361       SUBROUTINE ecmext(ktype,kfnum,ktot,ILAST,MSGA)
   2362 C$$$  SUBPROGRAM DOCUMENTATION BLOCK
   2363 C                .      .    .                                       .
   2364 C SUBPROGRAM:    ecmext.f    UNPACKS GRIB PDS EXTENSION 41- FOR ENSEMBLE
   2365 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   2366 C
   2367 C ABSTRACT: unpacks GRIB pds extension starting on byte 41 for ECMWF
   2368 c           ensemble files.  NOTE that this extension format is 
   2369 c           completely different from NCEP's extension format, and
   2370 c           this subroutine will not work if you try to read NCEP 
   2371 c           ensemble files.  This subroutine will unpack bytes 
   2372 c           41-52 of the pds header extension.
   2373 C
   2374 C PROGRAM HISTORY LOG:
   2375 c   97-01-17  Tim Marchok (Most of the code, however, is taken from 
   2376 c                          the pdseup.f subroutine, originally written
   2377 c                          by Mark Iredell and Zoltan Toth).
   2378 C   97-01-17  MARCHOK     original program
   2379 C   01-01-16  WOBUS       added DOCBLOCK
   2380 c   
   2381 C
   2382 C USAGE:    call ecmext(ktype,kfnum,ktot,ILAST,MSGA)
   2383 C   INPUT ARGUMENT LIST:
   2384 C     ILAST    - LAST BYTE TO BE UNPACKED (IF GREATER/EQUAL TO FIRST BYT
   2385 C                IN ANY OF FOUR SECTIONS BELOW, WHOLE SECTION IS PACKED.
   2386 C     MSGA     - FULL PDS SECTION, INCLUDING NEW ENSEMBLE EXTENSION
   2387 C
   2388 C   OUTPUT ARGUMENT LIST:      
   2389 c
   2390 c     *********  ECMWF PDS EXTENSION BYTE LIST  ****************
   2391 c
   2392 c     ludn       Byte 41 (Local Use Definition Number; should = 1)
   2393 c     kclass     Byte 42 (1=Operations; 2=Research)
   2394 c     ktype      Byte 43 (10=Control Fcst; 11=Perturbed Forecast)
   2395 c     kstream    Bytes 44-45 (1035=Ensemble Forecasts)
   2396 c     kver       Bytes 46-49 (Version Number/Experiment Identifier;
   2397 c                             4 ascii characters, right justified)
   2398 c     kfnum      Byte 50 (Ensemble Forecast Number;
   2399 c                         Control Forecast is number 0,
   2400 c                         perturbed forecast are 1-nn, where
   2401 c                         positive perturbation is an odd number,
   2402 c                         negative perturbation is an even number.
   2403 c     ktot       Byte 51 (Total number of forecasts in ensemble.
   2404 c                         This number includeds the control forecast).
   2405 c     -----      Byte 52 (Reserved, should be set to 0).
   2406 c
   2407 C
   2408 C REMARKS: USE PDSENS.F FOR PACKING PDS ENSEMBLE EXTENSION.
   2409 C
   2410 C ATTRIBUTES:
   2411 C   LANGUAGE: CF77 FORTRAN
   2412 C   MACHINE:  CRAY, WORKSTATIONS
   2413 C

Page 62          Source Listing                  ECMEXT
2020-06-15 22:06                                 ecmwfensh.f

   2414 C$$$
   2415 C
   2416       INTEGER KENS(5),KPROB(2),KCLUST(16),KMEMBR(80)
   2417       integer ludn,kclass,ktype,kstream,kver,kfnum,ktot
   2418       DIMENSION XPROB(2)
   2419       CHARACTER*1 MSGA(100)
   2420       character*1 cver(4)
   2421 c
   2422 C     CHECKING TOTAL NUMBER OF BYTES IN PDS (IBYTES)
   2423 c      print *,' '
   2424       CALL GBYTEC(MSGA, IBYTES, 0,24)
   2425 c      PRINT *,'IBYTES (length of pds) = ',IBYTES
   2426       IF (ILAST.GT.IBYTES) THEN
   2427 C       ILAST=IBYTES
   2428         PRINT *,'ERROR - THERE ARE ONLY ',IBYTES, ' BYTES IN THE PDS.'
   2429         GO TO 333
   2430       ENDIF
   2431       IF (ILAST.LT.41) THEN
   2432         PRINT *,'WARNING - SUBROUTINE FOR UNPACKING BYTES 41 AND ABOVE'
   2433         GO TO 333
   2434       ENDIF
   2435 C     UNPACKING FIRST SECTION (GENERAL INFORMATION)
   2436 c
   2437       CALL GBYTEC(MSGA,ludn,40*8,8)
   2438 c      print *,'ludn= ',ludn
   2439       CALL GBYTEC(MSGA,kclass,41*8,8)
   2440 c      print *,'kclass= ',kclass
   2441       CALL GBYTEC(MSGA,ktype,42*8,8)
   2442 c      print *,'ktype= ',ktype
   2443       CALL GBYTEC(MSGA,kstream,43*8,16)
   2444 c      print *,'kstream= ',kstream
   2445 c      CALL GBYTEC(MSGA,kver,45*8,32)
   2446       do ii=1,4
   2447         cver(ii) = msga(ii+45)
   2448       enddo
   2449 c      print '(17a,3x,4a1)','Version Number = ',cver
   2450       CALL GBYTEC(MSGA,kfnum,49*8,8)
   2451 c      print *,'kfnum= ',kfnum
   2452       CALL GBYTEC(MSGA,ktot,50*8,8)
   2453 c      print *,'ktot= ',ktot
   2454       CALL GBYTEC(MSGA,junk,51*8,8)
   2455 c      print *,'Byte 52= ',junk
   2456 c
   2457 c    &             ,' str=',kstream,' ver=',kver,' mem=',kfnum
   2458 c      print '(7(a6,i6))','  lu=',ludn,' cls=',kclass,' typ=',ktype
   2459 c     &             ,' str=',kstream,' mem=',kfnum
   2460 c     &             ,' tot=',ktot,' b52=',junk
   2461       goto 333
   2462 C
   2463  333  CONTINUE
   2464       RETURN
   2465       END

Page 63          Source Listing                  ECMEXT
2020-06-15 22:06 Entry Points                    ecmwfensh.f



ENTRY POINTS

  Name               
                     
 ecmext_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 333                        Label  2463                                                           2429,2433,2461                    
 CVER                       Local  2420     CHAR            1     1     4                         2447                              
 ECMEXT                     Subr   2361                                                                                             
 GBYTEC                     Subr   2424                                                           2424,2437,2439,2441,2443,2450,2452
                                                                                                  ,2454                             
 IBYTES                     Local  2424     I(4)            4           scalar                    2424,2426,2428                    
 II                         Local  2446     I(4)            4           scalar                    2446,2447                         
 ILAST                      Dummy  2361     I(4)            4           scalar   ARG,INOUT        2426,2431                         
 JUNK                       Local  2454     I(4)            4           scalar                    2454                              
 KCLASS                     Local  2417     I(4)            4           scalar                    2439                              
 KCLUST                     Local  2416     I(4)            4     1     16                                                          
 KENS                       Local  2416     I(4)            4     1     5                                                           
 KFNUM                      Dummy  2361     I(4)            4           scalar   ARG,INOUT        2450                              
 KMEMBR                     Local  2416     I(4)            4     1     80                                                          
 KPROB                      Local  2416     I(4)            4     1     2                                                           
 KSTREAM                    Local  2417     I(4)            4           scalar                    2443                              
 KTOT                       Dummy  2361     I(4)            4           scalar   ARG,INOUT        2452                              
 KTYPE                      Dummy  2361     I(4)            4           scalar   ARG,INOUT        2441                              
 KVER                       Local  2417     I(4)            4           scalar                                                      
 LUDN                       Local  2417     I(4)            4           scalar                    2437                              
 MSGA                       Dummy  2361     CHAR            1     1     100      ARG,INOUT        2424,2437,2439,2441,2443,2447,2450
                                                                                                  ,2452,2454                        
 XPROB                      Local  2418     R(8)            8     1     2                                                           

Page 64          Source Listing                  ECMEXT
2020-06-15 22:06                                 ecmwfensh.f

   2466 c
   2467 c----------------------------------------------------------------------c
   2468 c----------------------------------------------------------------------c
   2469 c
   2470       subroutine grib_close (lug,iret)
   2471 c$$$  SUBPROGRAM DOCUMENTATION BLOCK
   2472 C                .      .    .                                       .
   2473 C SUBPROGRAM:    grib_close
   2474 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   2475 C
   2476 C ABSTRACT: START ABSTRACT HERE AND INDENT TO COLUMN 5 ON THE
   2477 C   FOLLOWING LINES.  PLEASE PROVIDE A BRIEF DESCRIPTION OF
   2478 C   WHAT THE SUBPROGRAM DOES.
   2479 C
   2480 C PROGRAM HISTORY LOG:
   2481 C   97-01-17  MARCHOK     original program
   2482 C   01-01-16  WOBUS       added DOCBLOCK
   2483 C
   2484 C USAGE:    CALL PROGRAM-NAME(INARG1, INARG2, WRKARG, OUTARG1, ... )
   2485 C   INPUT ARGUMENT LIST:
   2486 C     INARG1   - GENERIC DESCRIPTION, INCLUDING CONTENT, UNITS,
   2487 C     INARG2   - TYPE.  EXPLAIN FUNCTION IF CONTROL VARIABLE.
   2488 C
   2489 C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
   2490 C     WRKARG   - GENERIC DESCRIPTION, ETC., AS ABOVE.
   2491 C     OUTARG1  - EXPLAIN COMPLETELY IF ERROR RETURN
   2492 C     ERRFLAG  - EVEN IF MANY LINES ARE NEEDED
   2493 C
   2494 C   INPUT FILES:   (DELETE IF NO INPUT FILES IN SUBPROGRAM)
   2495 C
   2496 C   OUTPUT FILES:  (DELETE IF NO OUTPUT FILES IN SUBPROGRAM)
   2497 C
   2498 C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
   2499 C
   2500 C ATTRIBUTES:
   2501 C   LANGUAGE: INDICATE EXTENSIONS, COMPILER OPTIONS
   2502 C   MACHINE:  IBM SP
   2503 C
   2504 C$$$
   2505 
   2506 C     ABSTRACT: This subroutine must be called before any attempt is
   2507 C     made to read from the input GRIB files.  The GRIB and index files
   2508 C     are opened with a call to baopenr.  This call to baopenr was not
   2509 C     needed in the cray version of this program (the files could be
   2510 C     opened with a simple Cray assign statement), but the GRIB-reading
   2511 C     utilities on the SP do require calls to this subroutine (it has
   2512 C     something to do with the GRIB I/O being done in C on the SP, and
   2513 C     the C I/O package needs an explicit open statement).
   2514 C
   2515 C     INPUT:
   2516 C     lug      The Fortran unit number for the GRIB file
   2517 C     OUTPUT:
   2518 C     iret     The return code from this subroutine
   2519 
   2520       character unitname*11
   2521       character fname*80
   2522 

Page 65          Source Listing                  GRIB_CLOSE
2020-06-15 22:06                                 ecmwfensh.f

   2523       unitname(1:11) = "XLFUNIT_   "
   2524       if (lug.lt.100) then
   2525 	write(unitname(9:10),'(I2)') lug
   2526       else
   2527 	write(unitname(9:11),'(I3)') lug
   2528       endif
   2529       call getenv(unitname,fname)
   2530 c     print *,' '
   2531 c     print *,' in grib_close:  unit: ',lug
   2532 c     print *,' in grib_close:  fname: ',fname
   2533       ioret=0
   2534       call baclose (lug,fname,ioret)
   2535 
   2536 c     print *,' ' 
   2537 c     print *,'baclose: ioret= ',ioret
   2538 
   2539       iret=0
   2540       if (ioret /= 0) then
   2541         print *,' '
   2542         print *,'!!! ERROR in grib_close closing grib file'
   2543         print *,'!!! baclose return code = ioret = ',ioret
   2544         iret = 93
   2545         return
   2546       endif
   2547 
   2548       return
   2549       end


ENTRY POINTS

  Name                   
                         
 grib_close_             

Page 66          Source Listing                  GRIB_CLOSE
2020-06-15 22:06 Symbol Table                    ecmwfensh.f



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BACLOSE                    Subr   2534                                                           2534                              
 FNAME                      Local  2521     CHAR            80          scalar                    2529,2534                         
 GETENV                     Subr   2529                                                           2529                              
 GRIB_CLOSE                 Subr   2470                                                                                             
 IORET                      Local  2533     I(4)            4           scalar                    2533,2534,2540,2543               
 IRET                       Dummy  2470     I(4)            4           scalar   ARG,INOUT        2539,2544                         
 LUG                        Dummy  2470     I(4)            4           scalar   ARG,INOUT        2524,2525,2527,2534               
 UNITNAME                   Local  2520     CHAR            11          scalar                    2523,2525,2527,2529               

Page 67          Source Listing                  GRIB_CLOSE
2020-06-15 22:06                                 ecmwfensh.f

   2550 c
   2551 c----------------------------------------------------------------------c
   2552 c----------------------------------------------------------------------c
   2553 c
   2554       subroutine grib_open (lug,iret)
   2555 c$$$  SUBPROGRAM DOCUMENTATION BLOCK
   2556 C                .      .    .                                       .
   2557 C SUBPROGRAM:    grib_open
   2558 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   2559 C
   2560 C ABSTRACT: START ABSTRACT HERE AND INDENT TO COLUMN 5 ON THE
   2561 C   FOLLOWING LINES.  PLEASE PROVIDE A BRIEF DESCRIPTION OF
   2562 C   WHAT THE SUBPROGRAM DOES.
   2563 C
   2564 C PROGRAM HISTORY LOG:
   2565 C   97-01-17  MARCHOK     original program
   2566 C   01-01-16  WOBUS       added DOCBLOCK
   2567 C
   2568 C USAGE:    CALL PROGRAM-NAME(INARG1, INARG2, WRKARG, OUTARG1, ... )
   2569 C   INPUT ARGUMENT LIST:
   2570 C     INARG1   - GENERIC DESCRIPTION, INCLUDING CONTENT, UNITS,
   2571 C     INARG2   - TYPE.  EXPLAIN FUNCTION IF CONTROL VARIABLE.
   2572 C
   2573 C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
   2574 C     WRKARG   - GENERIC DESCRIPTION, ETC., AS ABOVE.
   2575 C     OUTARG1  - EXPLAIN COMPLETELY IF ERROR RETURN
   2576 C     ERRFLAG  - EVEN IF MANY LINES ARE NEEDED
   2577 C
   2578 C   INPUT FILES:   (DELETE IF NO INPUT FILES IN SUBPROGRAM)
   2579 C
   2580 C   OUTPUT FILES:  (DELETE IF NO OUTPUT FILES IN SUBPROGRAM)
   2581 C
   2582 C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
   2583 C
   2584 C ATTRIBUTES:
   2585 C   LANGUAGE: INDICATE EXTENSIONS, COMPILER OPTIONS
   2586 C   MACHINE:  IBM SP
   2587 C
   2588 C$$$
   2589 
   2590 C     ABSTRACT: This subroutine must be called before any attempt is
   2591 C     made to access the GRIB file.  The GRIB file
   2592 C     is opened with a call to baopen.  This call to baopen was not
   2593 C     needed in the cray version of this program (the files could be
   2594 C     opened with a simple Cray assign statement), but the GRIB I/O
   2595 C     utilities on the SP do require calls to this subroutine (it has
   2596 C     something to do with the GRIB I/O being done in C on the SP, and
   2597 C     the C I/O package needs an explicit open statement).
   2598 C
   2599 C     INPUT:
   2600 C     lug      The Fortran unit number for the GRIB file
   2601 C     OUTPUT:
   2602 C     iret     The return code from this subroutine
   2603 
   2604       character unitname*11
   2605       character fname*80
   2606 

Page 68          Source Listing                  GRIB_OPEN
2020-06-15 22:06                                 ecmwfensh.f

   2607 c     unitname(1:8) = "XLFUNIT_"
   2608       unitname(1:11) = "XLFUNIT_   "
   2609       if (lug.lt.100) then
   2610 	write(unitname(9:10),'(I2)') lug
   2611       else
   2612 	write(unitname(9:11),'(I3)') lug
   2613       endif
   2614 c     write(unitname(9:10),'(I2)') lug
   2615       call getenv(unitname,fname)
   2616 c     print *,' '
   2617 c     print *,' in grib_open:  unit: ',lug
   2618 c     print *,' in grib_open:  fname: ',fname
   2619       ioret=0
   2620       call baopen (lug,fname,ioret)
   2621 
   2622 c     print *,' ' 
   2623 c     print *,'baopen: ioret= ',ioret
   2624 
   2625       iret=0
   2626       if (ioret /= 0) then
   2627         print *,' '
   2628         print *,'!!! ERROR in grib_open opening grib file'
   2629         print *,'!!! baopen return code = ioret = ',ioret
   2630         iret = 93
   2631         return
   2632       endif
   2633 
   2634       return
   2635       end

Page 69          Source Listing                  GRIB_OPEN
2020-06-15 22:06 Entry Points                    ecmwfensh.f



ENTRY POINTS

  Name                  
                        
 grib_open_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BAOPEN                     Subr   2620                                                           2620                              
 FNAME                      Local  2605     CHAR            80          scalar                    2615,2620                         
 GETENV                     Subr   2615                                                           2615                              
 GRIB_OPEN                  Subr   2554                                                                                             
 IORET                      Local  2619     I(4)            4           scalar                    2619,2620,2626,2629               
 IRET                       Dummy  2554     I(4)            4           scalar   ARG,INOUT        2625,2630                         
 LUG                        Dummy  2554     I(4)            4           scalar   ARG,INOUT        2609,2610,2612,2620               
 UNITNAME                   Local  2604     CHAR            11          scalar                    2608,2610,2612,2615               

Page 70          Source Listing                  GRIB_OPEN
2020-06-15 22:06                                 ecmwfensh.f

   2636 c
   2637 c----------------------------------------------------------------------c
   2638 c----------------------------------------------------------------------c
   2639 c
   2640       subroutine grib_open_wa (lug,iret)
   2641 c$$$  SUBPROGRAM DOCUMENTATION BLOCK
   2642 C                .      .    .                                       .
   2643 C SUBPROGRAM:    grib_open_wa
   2644 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   2645 C
   2646 C ABSTRACT: START ABSTRACT HERE AND INDENT TO COLUMN 5 ON THE
   2647 C   FOLLOWING LINES.  PLEASE PROVIDE A BRIEF DESCRIPTION OF
   2648 C   WHAT THE SUBPROGRAM DOES.
   2649 C
   2650 C PROGRAM HISTORY LOG:
   2651 C   97-01-17  MARCHOK     original program
   2652 C   01-01-16  WOBUS       added DOCBLOCK
   2653 C
   2654 C USAGE:    CALL PROGRAM-NAME(INARG1, INARG2, WRKARG, OUTARG1, ... )
   2655 C   INPUT ARGUMENT LIST:
   2656 C     INARG1   - GENERIC DESCRIPTION, INCLUDING CONTENT, UNITS,
   2657 C     INARG2   - TYPE.  EXPLAIN FUNCTION IF CONTROL VARIABLE.
   2658 C
   2659 C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
   2660 C     WRKARG   - GENERIC DESCRIPTION, ETC., AS ABOVE.
   2661 C     OUTARG1  - EXPLAIN COMPLETELY IF ERROR RETURN
   2662 C     ERRFLAG  - EVEN IF MANY LINES ARE NEEDED
   2663 C
   2664 C   INPUT FILES:   (DELETE IF NO INPUT FILES IN SUBPROGRAM)
   2665 C
   2666 C   OUTPUT FILES:  (DELETE IF NO OUTPUT FILES IN SUBPROGRAM)
   2667 C
   2668 C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
   2669 C
   2670 C ATTRIBUTES:
   2671 C   LANGUAGE: INDICATE EXTENSIONS, COMPILER OPTIONS
   2672 C   MACHINE:  IBM SP
   2673 C
   2674 C$$$
   2675 
   2676 C     ABSTRACT: This subroutine must be called before any attempt is
   2677 C     made to write to from the output GRIB files.  The GRIB file
   2678 C     is opened with a call to baopenwa.  This call to baopenwa was not
   2679 C     needed in the cray version of this program (the files could be
   2680 C     opened with a simple Cray assign statement), but the GRIB-writing
   2681 C     utilities on the SP do require calls to this subroutine (it has
   2682 C     something to do with the GRIB I/O being done in C on the SP, and
   2683 C     the C I/O package needs an explicit open statement).
   2684 C
   2685 C     INPUT:
   2686 C     lug      The Fortran unit number for the GRIB file
   2687 C     OUTPUT:
   2688 C     iret     The return code from this subroutine
   2689 
   2690 c     character unitname*10
   2691       character unitname*11
   2692       character fname*80

Page 71          Source Listing                  GRIB_OPEN_WA
2020-06-15 22:06                                 ecmwfensh.f

   2693 
   2694 c     unitname(1:8) = "XLFUNIT_"
   2695       unitname(1:11) = "XLFUNIT_   "
   2696       if (lug.lt.100) then
   2697 	write(unitname(9:10),'(I2)') lug
   2698       else
   2699 	write(unitname(9:11),'(I3)') lug
   2700       endif
   2701 c     write(unitname(9:10),'(I2)') lug
   2702       call getenv(unitname,fname)
   2703 c     print *,' '
   2704 c     print *,' in grib_open_wa:  unit: ',lug
   2705 c     print *,' in grib_open_wa:  fname: ',fname
   2706       ioret=0
   2707       call baopenwa (lug,fname,ioret)
   2708 
   2709 c     print *,' ' 
   2710 c     print *,'baopenwa: ioret= ',ioret
   2711 
   2712       iret=0
   2713       if (ioret /= 0) then
   2714         print *,' '
   2715         print *,'!!! ERROR in grib_open_wa opening grib file'
   2716         print *,'!!! baopenwa return code = ioret = ',ioret
   2717         iret = 93
   2718         return
   2719       endif
   2720 
   2721       return
   2722       end

Page 72          Source Listing                  GRIB_OPEN_WA
2020-06-15 22:06 Entry Points                    ecmwfensh.f



ENTRY POINTS

  Name                     
                           
 grib_open_wa_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BAOPENWA                   Subr   2707                                                           2707                              
 FNAME                      Local  2692     CHAR            80          scalar                    2702,2707                         
 GETENV                     Subr   2702                                                           2702                              
 GRIB_OPEN_WA               Subr   2640                                                                                             
 IORET                      Local  2706     I(4)            4           scalar                    2706,2707,2713,2716               
 IRET                       Dummy  2640     I(4)            4           scalar   ARG,INOUT        2712,2717                         
 LUG                        Dummy  2640     I(4)            4           scalar   ARG,INOUT        2696,2697,2699,2707               
 UNITNAME                   Local  2691     CHAR            11          scalar                    2695,2697,2699,2702               

Page 73          Source Listing                  GRIB_OPEN_WA
2020-06-15 22:06                                 ecmwfensh.f

   2723 c
   2724 c----------------------------------------------------------------------c
   2725 c----------------------------------------------------------------------c
   2726 c
   2727       subroutine grib_open_r (lug,iret)
   2728 c$$$  SUBPROGRAM DOCUMENTATION BLOCK
   2729 C                .      .    .                                       .
   2730 C SUBPROGRAM:    grib_open_r
   2731 C   PRGMMR: WOBUS            ORG: NP20        DATE: 2001-01-16
   2732 C
   2733 C ABSTRACT: This subroutine must be called before any attempt is
   2734 C   made to read from the input GRIB files.  The GRIB and index files
   2735 C   are opened with a call to baopenr.  This call to baopenr was not
   2736 C   needed in the cray version of this program (the files could be
   2737 C   opened with a simple Cray assign statement), but the GRIB-reading
   2738 C   utilities on the SP do require calls to this subroutine (it has
   2739 C   something to do with the GRIB I/O being done in C on the SP, and
   2740 C   the C I/O package needs an explicit open statement).
   2741 C
   2742 C PROGRAM HISTORY LOG:
   2743 C   97-01-17  MARCHOK     original program
   2744 C   01-01-16  WOBUS       added DOCBLOCK
   2745 C
   2746 C USAGE:    CALL PROGRAM-NAME(INARG1, INARG2, WRKARG, OUTARG1, ... )
   2747 C   INPUT ARGUMENT LIST:
   2748 C     lug      The Fortran unit number for the GRIB file
   2749 C
   2750 C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
   2751 C     iret     The return code from this subroutine
   2752 C
   2753 C   INPUT FILES:   (DELETE IF NO INPUT FILES IN SUBPROGRAM)
   2754 C     lug      The Fortran unit number for the GRIB file
   2755 C
   2756 C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
   2757 C
   2758 C ATTRIBUTES:
   2759 C   LANGUAGE: INDICATE EXTENSIONS, COMPILER OPTIONS
   2760 C   MACHINE:  IBM SP
   2761 C
   2762 C$$$
   2763 
   2764 C
   2765 C     INPUT:
   2766 C     OUTPUT:
   2767 
   2768 c     character unitname*10
   2769       character unitname*11
   2770       character fname*80
   2771 
   2772 c     unitname(1:8) = "XLFUNIT_"
   2773       unitname(1:11) = "XLFUNIT_   "
   2774       if (lug.lt.100) then
   2775 	write(unitname(9:10),'(I2)') lug
   2776       else
   2777 	write(unitname(9:11),'(I3)') lug
   2778       endif
   2779 c     write(unitname(9:10),'(I2)') lug

Page 74          Source Listing                  GRIB_OPEN_R
2020-06-15 22:06                                 ecmwfensh.f

   2780       call getenv(unitname,fname)
   2781 c     print *,' '
   2782 c     print *,' in grib_open_r:  unit: ',lug
   2783 c     print *,' in grib_open_r:  fname: ',fname
   2784       ioret=0
   2785       call baopenr (lug,fname,ioret)
   2786 
   2787 c     print *,' ' 
   2788 c     print *,'baopenr: ioret= ',ioret
   2789 
   2790       iret=0
   2791       if (ioret /= 0) then
   2792         print *,' '
   2793         print *,'!!! ERROR in sub grib_open_r opening grib file'
   2794         print *,'!!! baopenr return code = ioret = ',ioret
   2795         iret = 93
   2796         return
   2797       endif
   2798 
   2799       return
   2800       end


ENTRY POINTS

  Name                    
                          
 grib_open_r_             

Page 75          Source Listing                  GRIB_OPEN_R
2020-06-15 22:06 Symbol Table                    ecmwfensh.f



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BAOPENR                    Subr   2785                                                           2785                              
 FNAME                      Local  2770     CHAR            80          scalar                    2780,2785                         
 GETENV                     Subr   2780                                                           2780                              
 GRIB_OPEN_R                Subr   2727                                                                                             
 IORET                      Local  2784     I(4)            4           scalar                    2784,2785,2791,2794               
 IRET                       Dummy  2727     I(4)            4           scalar   ARG,INOUT        2790,2795                         
 LUG                        Dummy  2727     I(4)            4           scalar   ARG,INOUT        2774,2775,2777,2785               
 UNITNAME                   Local  2769     CHAR            11          scalar                    2773,2775,2777,2780               

Page 76          Source Listing                  GRIB_OPEN_R
2020-06-15 22:06 Subprograms/Common Blocks       ecmwfensh.f



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJEXT                     Subr   1394                                                                                             
 ADJPDS                     Subr   1162                                                                                             
 CREATE_STATS               Subr   1059                                                                                             
 ECMEXT                     Subr   2361                                                                                             
 ECMWFENSH                  Prog   1                                                                                                
 GETGBECE                   Subr   2082                                                                                             
 GRANGE                     Subr   2037                                                                                             
 GRIB_CLOSE                 Subr   2470                                                                                             
 GRIB_OPEN                  Subr   2554                                                                                             
 GRIB_OPEN_R                Subr   2727                                                                                             
 GRIB_OPEN_WA               Subr   2640                                                                                             
 OUTPUT                     Subr   1508                                                                                             
 OUTPUT_STATS               Subr   1584                                                                                             
 SRANGE                     Subr   1894                                                                                             

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume nobyterecl                    -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume nocc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_ldout_format              -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores           no   -auto
       -auto_scalar                     no   -bintext
       -ccdefault default                    -check noarg_temp_created
       -check noassume                       -check nobounds
       -check nocontiguous                   -check noformat
       -check nooutput_conversion            -check nooverflow
       -check nopointers                     -check noshape

Page 77          Source Listing                  GRIB_OPEN_R
2020-06-15 22:06                                 ecmwfensh.f

       -check nostack                        -check nouninitialized
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1800              -D __INTEL_COMPILER_UPDATE=5
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20180823       -D __INTEL_OFFLOAD
       -D __i686                             -D __i686__
       -D __pentiumpro                       -D __pentiumpro__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D __SSE2__
       -D __SSE2_MATH__                      -D __SSE__
       -D __SSE_MATH__                       -D __MMX__
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
       -fixed                           no   -fpconstant
       -fpe3                                 -fprm nearest
  no   -ftz                                  -fp_model noprecise
       -fp_model fast                        -fp_model nostrict
       -fp_model nosource                    -fp_model nodouble
       -fp_model noextended                  -fp_model novery_fast
       -fp_model noexcept                    -fp_model nono_except
       -heap_arrays 0                   no   -threadprivate_compat
       -g0                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
  no   -module                               -names lowercase
  no   -noinclude                            -offload-build=host
       -O2                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded             no   -sharable_localsaves
       -vec=simd                             -show nofullpath
       -show noinclude                       -show map
       -show options                    no   -syntax_only
  no   -threadcom                       no   -U
  no   -vms                                  -w noall
       -w nonone                             -w alignments
       -w nodeclarations                     -w general
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w notruncated_source
       -w uncalled                           -w uninitialized
       -w nounused                           -w usage
  no   -wrap-margins


Page 78          Source Listing                  GRIB_OPEN_R
2020-06-15 22:06                                 ecmwfensh.f

       -includepath : /apps/intel/parallel_studio_xe_2018.4.057/compilers_and_libraries_2018/linux/tbb/include/,/usr/local/include/,
           .f,./.f,/apps/intel/parallel_studio_xe_2018.4.057/compilers_and_libraries_2018/linux/ipp/include/.f,/apps/intel/parallel_studio_xe_2018.4.057/compilers_and_libraries_2018/linux/mkl/include/.f,
           /apps/intel/parallel_studio_xe_2018.4.057/compilers_and_libraries_2018/linux/pstl/include/.f,/apps/intel/parallel_studio_xe_2018.4.057/compilers_and_libraries_2018/linux/tbb/include/.f,
           /apps/intel/parallel_studio_xe_2018.4.057/compilers_and_libraries_2018/linux/daal/include/.f,/apps/intel/compilers_and_libraries_2018.5.274/linux/compiler/include/intel64/.f,
           /apps/intel/compilers_and_libraries_2018.5.274/linux/compiler/include/icc/.f,/apps/intel/compilers_and_libraries_2018.5.274/linux/compiler/include/.f,
           /usr/local/include/.f,/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f,/usr/include/.f,/usr/include/.f,
           /usr/include/.f
       -list filename : ecmwfensh.lst
       -o    filename : none

COMPILER: Intel(R) Fortran 18.0-1651
